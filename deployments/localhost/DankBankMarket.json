{
  "address": "0xDa35f8ee30Edaac97A1B410e698a1bc5D2e8DB94",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensBought",
          "type": "uint256"
        }
      ],
      "name": "DankBankBuy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensSold",
          "type": "uint256"
        }
      ],
      "name": "DankBankSell",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesMinted",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensRemoved",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethRemoved",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sharesBurnt",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MULTIPLIER_SUB_ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minEthAdded",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minTokensOut",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ethIn",
          "type": "uint256"
        }
      ],
      "name": "calculateBuyTokensOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        }
      ],
      "name": "calculateSellEthOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ethPoolSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTotalEthPoolSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initVirtualEthSupply",
          "type": "uint256"
        }
      ],
      "name": "initPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "lpTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "burnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minEth",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokensIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minEthOut",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "virtualEthPoolSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5970eb1c8cb00b4a42f10802d38acb8eb3fb517351576e736d1480c190c563c6",
  "receipt": {
    "to": null,
    "from": "0x781d31b302D8D9B834347bfcafD8e1e1dA470DfF",
    "contractAddress": "0xDa35f8ee30Edaac97A1B410e698a1bc5D2e8DB94",
    "transactionIndex": 0,
    "gasUsed": "2831754",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x779f485d96d11493866584363256bd9165b956008e6be3b1cedeb38a855acc7e",
    "transactionHash": "0x5970eb1c8cb00b4a42f10802d38acb8eb3fb517351576e736d1480c190c563c6",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2831754",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "a0699fe23fba552963bf6600f461dde8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"}],\"name\":\"DankBankBuy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSold\",\"type\":\"uint256\"}],\"name\":\"DankBankSell\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesMinted\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethRemoved\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharesBurnt\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER_SUB_ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthAdded\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokensOut\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethIn\",\"type\":\"uint256\"}],\"name\":\"calculateBuyTokensOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"}],\"name\":\"calculateSellEthOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethPoolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTotalEthPoolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initVirtualEthSupply\",\"type\":\"uint256\"}],\"name\":\"initPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lpTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEth\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minEthOut\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"virtualEthPoolSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lpTokenSupply(uint256)\":{\"notice\":\"Get the supply of the token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DankBankMarket.sol\":\"DankBankMarket\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdf3a49167ee6c6ba60205aa5eefe29d3ff340b73d7326733eb53f440371b717e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"contracts/DankBankMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./DankBankMarketData.sol\\\";\\nimport \\\"./ERC1155LPTokenUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract DankBankMarket is DankBankMarketData, Initializable, ERC1155LPTokenUpgradeable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant FEE_MULTIPLIER = 500; // 0.2% fee on trades\\n    uint256 public constant MULTIPLIER_SUB_ONE = FEE_MULTIPLIER - 1;\\n\\n    function init(string memory uri) public initializer {\\n        __ERC1155_init(uri);\\n    }\\n\\n    function initPool(address token, uint256 inputAmount, uint256 initVirtualEthSupply) external {\\n        require(virtualEthPoolSupply[token] == 0, \\\"DankBankMarket: pool already initialized\\\");\\n        require(inputAmount > 0 && initVirtualEthSupply > 0, \\\"DankBankMarket: initial pool amounts must be greater than 0.\\\");\\n\\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), inputAmount);\\n\\n        uint256 tokenId = getTokenId(token);\\n\\n        _mint(_msgSender(), tokenId, initVirtualEthSupply, \\\"\\\");\\n        virtualEthPoolSupply[token] = initVirtualEthSupply;\\n\\n        emit LiquidityAdded(_msgSender(), token, inputAmount, initVirtualEthSupply);\\n    }\\n\\n    function addLiquidity(\\n        address token,\\n        uint256 inputAmount,\\n        uint256 minEthAdded\\n    ) external payable {\\n        require(virtualEthPoolSupply[token] > 0, \\\"DankBankMarket: pool must be initialized before adding liquidity\\\");\\n\\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), inputAmount);\\n\\n        uint256 tokenId = getTokenId(token);\\n\\n        uint256 prevPoolBalance = IERC20(token).balanceOf(address(this)) - inputAmount;\\n\\n        uint256 ethAdded = (inputAmount * ethPoolSupply[token]) / prevPoolBalance;\\n\\n        // ensure adding liquidity in specific price range\\n        require(msg.value >= ethAdded, \\\"DankBankMarket: insufficient ETH supplied.\\\");\\n        require(ethAdded >= minEthAdded, \\\"DankBankMarket: ETH supplied less than minimum required.\\\");\\n\\n        ethPoolSupply[token] += ethAdded;\\n\\n        uint256 virtualEthAdded = (inputAmount * virtualEthPoolSupply[token]) / prevPoolBalance;\\n        virtualEthPoolSupply[token] += virtualEthAdded;\\n\\n        uint256 mintAmount = (inputAmount * lpTokenSupply(tokenId)) / prevPoolBalance;\\n        _mint(_msgSender(), tokenId, mintAmount, \\\"\\\");\\n\\n        // refund dust eth if any\\n        if (msg.value > ethAdded) {\\n            (bool success, ) = _msgSender().call{ value: msg.value - ethAdded }(\\\"\\\");\\n            require(success, \\\"DankBankMarket: Transfer failed.\\\");\\n        }\\n\\n        emit LiquidityAdded(_msgSender(), token, inputAmount, mintAmount);\\n    }\\n\\n    function removeLiquidity(address token, uint256 burnAmount, uint256 minTokens, uint256 minEth) external {\\n        uint256 tokenId = getTokenId(token);\\n        uint256 lpSupply = lpTokenSupply(tokenId);\\n\\n        uint256 ethRemoved = (burnAmount * ethPoolSupply[token]) / lpSupply;\\n        ethPoolSupply[token] -= ethRemoved;\\n        require(ethRemoved >= minEth, \\\"DankBankMarket: ETH out is less than minimum ETH specified\\\");\\n\\n        virtualEthPoolSupply[token] -= (burnAmount * virtualEthPoolSupply[token]) / lpSupply;\\n\\n        uint256 tokensRemoved = (burnAmount * IERC20(token).balanceOf(address(this))) / lpSupply;\\n        require(tokensRemoved >= minTokens, \\\"DankBankMarket: Token out is less than minimum specified\\\");\\n\\n        // burn will revert if burn amount exceeds balance\\n        _burn(_msgSender(), tokenId, burnAmount);\\n\\n        // XXX: _burn must by attempted before transfers to prevent reentrancy\\n        IERC20(token).safeTransfer(_msgSender(), tokensRemoved);\\n\\n        (bool success, ) = _msgSender().call{ value: ethRemoved }(\\\"\\\");\\n        require(success, \\\"DankBankMarket: Transfer failed.\\\");\\n\\n        emit LiquidityRemoved(_msgSender(), token, tokensRemoved, ethRemoved, burnAmount);\\n    }\\n\\n    function buy(address token, uint256 minTokensOut) external payable {\\n        uint256 tokensOut = calculateBuyTokensOut(token, msg.value);\\n\\n        ethPoolSupply[token] += msg.value;\\n\\n        require(tokensOut >= minTokensOut, \\\"DankBankMarket: Insufficient tokens out.\\\");\\n        IERC20(token).safeTransfer(_msgSender(), tokensOut);\\n\\n        emit DankBankBuy(_msgSender(), token, msg.value, tokensOut);\\n    }\\n\\n    function sell(\\n        address token,\\n        uint256 tokensIn,\\n        uint256 minEthOut\\n    ) external {\\n        uint256 ethOut = calculateSellEthOut(token, tokensIn);\\n\\n        require(ethOut >= minEthOut, \\\"DankBankMarket: Insufficient eth out.\\\");\\n\\n        require(ethPoolSupply[token] >= ethOut, \\\"DankBankMarket: Market has insufficient liquidity for the trade.\\\");\\n        unchecked {\\n            ethPoolSupply[token] -= ethOut;\\n        }\\n\\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), tokensIn);\\n\\n        (bool success, ) = _msgSender().call{ value: ethOut }(\\\"\\\");\\n        require(success, \\\"DankBankMarket: Transfer failed.\\\");\\n\\n        emit DankBankSell(_msgSender(), token, ethOut, tokensIn);\\n    }\\n\\n    function calculateBuyTokensOut(address token, uint256 ethIn) public view returns (uint256 tokensOut) {\\n        /**\\n        Logic below is a simplified version of:\\n\\n        uint256 fee = ethIn / FEE_MULTIPLIER;\\n\\n        uint256 ethSupply = getTotalEthPoolSupply(token);\\n\\n        uint256 invariant = ethSupply * tokenPool;\\n\\n        uint256 newTokenPool = invariant / ((ethSupply + ethIn) - fee);\\n        tokensOut = tokenPool - newTokenPool;\\n        */\\n\\n        uint256 scaledTokenPool = IERC20(token).balanceOf(address(this)) * MULTIPLIER_SUB_ONE;\\n        uint256 scaledEthPool = getTotalEthPoolSupply(token) * FEE_MULTIPLIER;\\n\\n        tokensOut = (scaledTokenPool * ethIn) / (scaledEthPool + MULTIPLIER_SUB_ONE * ethIn);\\n    }\\n\\n    function calculateSellEthOut(address token, uint256 tokensIn) public view returns (uint256 ethOut) {\\n        /**\\n        Logic below is a simplified version of:\\n\\n        uint256 fee = tokensIn / FEE_MULTIPLIER;\\n\\n        uint256 tokenPool = IERC20(token).balanceOf(address(this));\\n        uint256 ethPool = getTotalEthPoolSupply(token);\\n        uint256 invariant = ethPool * tokenPool;\\n\\n        uint256 newEthPool = invariant / ((tokenPool + tokensIn) - fee);\\n        ethOut = ethPool - newEthPool;\\n        */\\n\\n        uint256 scaledEthPool = getTotalEthPoolSupply(token) * MULTIPLIER_SUB_ONE;\\n        uint256 scaledTokenPool = IERC20(token).balanceOf(address(this)) * FEE_MULTIPLIER;\\n\\n        ethOut = (scaledEthPool * tokensIn) / (scaledTokenPool + MULTIPLIER_SUB_ONE * tokensIn);\\n    }\\n\\n    function getTotalEthPoolSupply(address token) public view returns (uint256) {\\n        return virtualEthPoolSupply[token] + ethPoolSupply[token];\\n    }\\n\\n    function getTokenId(address token) public pure returns (uint256) {\\n        return uint256(uint160(token));\\n    }\\n}\\n\",\"keccak256\":\"0x55158fc6ffb928c4a98de15e61d0454e6b5ea3afb688cb254fc8eb32be9a4e07\",\"license\":\"MIT\"},\"contracts/DankBankMarketData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ncontract DankBankMarketData {\\n    mapping(address => uint256) public virtualEthPoolSupply;\\n    mapping(address => uint256) public ethPoolSupply;\\n\\n    event LiquidityAdded(\\n        address indexed funder,\\n        address token,\\n        uint256 amountAdded,\\n        uint256 sharesMinted\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed funder,\\n        address token,\\n        uint256 tokensRemoved,\\n        uint256 ethRemoved,\\n        uint sharesBurnt\\n    );\\n\\n    event DankBankBuy(\\n        address indexed buyer,\\n        address token,\\n        uint256 investmentAmount,\\n        uint256 tokensBought\\n    );\\n\\n    event DankBankSell(\\n        address indexed seller,\\n        address token,\\n        uint256 returnAmount,\\n        uint256 tokensSold\\n    );\\n}\\n\",\"keccak256\":\"0x210724979fb25661d5b4d8d0248d05867be94f68025c856af221d5e4722548bb\",\"license\":\"MIT\"},\"contracts/ERC1155LPTokenUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * copied from https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/37a95ee069078e38dffe193634665304d8f37f85/contracts/token/ERC1155/ERC1155.sol\\n * and add a token supply to each token;\\n *\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155LPTokenUpgradeable is\\n    Initializable,\\n    ContextUpgradeable,\\n    ERC165Upgradeable,\\n    IERC1155Upgradeable,\\n    IERC1155MetadataURIUpgradeable\\n{\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    mapping(uint256 => uint256) public _tokenSupplies;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * Get the supply of the token\\n     */\\n    function lpTokenSupply(uint256 tokenId) public view returns (uint256) {\\n        return _tokenSupplies[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IERC1155Upgradeable).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked { _balances[id][from] = fromBalance - amount; }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked { _balances[id][from] = fromBalance - amount; }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _tokenSupplies[id] += amount;\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            _balances[id][to] += amounts[i];\\n            _tokenSupplies[id] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n            _tokenSupplies[id] -= amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n                _tokenSupplies[id] -= amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0xae1033525db01c7f6981a6e3509924e7e48852f7bc2655a99d8a9fb1adde5162\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061325c806100206000396000f3fe60806040526004361061018a5760003560e01c806382b1efc1116100d6578063cce7ec131161007f578063f153768611610059578063f15376861461049c578063f242432a146104c3578063f9fbdb9e146104e357600080fd5b8063cce7ec1314610413578063d315698814610426578063e985e9c51461045357600080fd5b8063a615e05a116100b0578063a615e05a146103bd578063b591b13c146103dd578063b6e7d665146103f357600080fd5b806382b1efc11461035057806393ca2f8a1461037d578063a22cb4651461039d57600080fd5b80634e1273f4116101385780636a272462116101125780636a272462146102fb57806375beb82c1461031b5780638108dd211461033057600080fd5b80634e1273f41461029b57806350eb2145146102c857806355776b77146102e857600080fd5b80630f991c38116101695780630f991c381461021f57806324eb07f51461024c5780632eb2c2d61461027957600080fd5b8062fdd58e1461018f57806301ffc9a7146101c25780630e89341c146101f2575b600080fd5b34801561019b57600080fd5b506101af6101aa366004612c89565b610503565b6040519081526020015b60405180910390f35b3480156101ce57600080fd5b506101e26101dd366004612e03565b6105ae565b60405190151581526020016101b9565b3480156101fe57600080fd5b5061021261020d366004612e89565b61064b565b6040516101b99190613009565b34801561022b57600080fd5b506101af61023a366004612afe565b60006020819052908152604090205481565b34801561025857600080fd5b506101af610267366004612afe565b60016020526000908152604090205481565b34801561028557600080fd5b50610299610294366004612b4a565b6106df565b005b3480156102a757600080fd5b506102bb6102b6366004612d1c565b610781565b6040516101b99190612fd1565b3480156102d457600080fd5b506102996102e3366004612cb2565b6108f7565b6102996102f6366004612cb2565b610aa6565b34801561030757600080fd5b50610299610316366004612cb2565b610eca565b34801561032757600080fd5b506101af6110f4565b34801561033c57600080fd5b506101af61034b366004612c89565b611104565b34801561035c57600080fd5b506101af61036b366004612e89565b606a6020526000908152604090205481565b34801561038957600080fd5b50610299610398366004612ce4565b6111f3565b3480156103a957600080fd5b506102996103b8366004612c53565b611551565b3480156103c957600080fd5b506101af6103d8366004612c89565b61163c565b3480156103e957600080fd5b506101af6101f481565b3480156103ff57600080fd5b506101af61040e366004612afe565b6116d9565b610299610421366004612c89565b611706565b34801561043257600080fd5b506101af610441366004612e89565b6000908152606a602052604090205490565b34801561045f57600080fd5b506101e261046e366004612b18565b6001600160a01b03918216600090815260686020908152604080832093909416825291909152205460ff1690565b3480156104a857600080fd5b506101af6104b7366004612afe565b6001600160a01b031690565b3480156104cf57600080fd5b506102996104de366004612bf0565b61181e565b3480156104ef57600080fd5b506102996104fe366004612e3b565b6118b9565b60006001600160a01b0383166105865760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526067602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061061157506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061064557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606069805461065a906130da565b80601f0160208091040260200160405190810160405280929190818152602001828054610686906130da565b80156106d35780601f106106a8576101008083540402835291602001916106d3565b820191906000526020600020905b8154815290600101906020018083116106b657829003601f168201915b50505050509050919050565b6001600160a01b0385163314806106fb57506106fb853361046e565b61076d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161057d565b61077a8585858585611976565b5050505050565b606081518351146107fa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161057d565b6000835167ffffffffffffffff81111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b50905060005b84518110156108ef576108b485828151811061087f57634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106108a757634e487b7160e01b600052603260045260246000fd5b6020026020010151610503565b8282815181106108d457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526108e881613142565b9050610853565b509392505050565b6001600160a01b038316600090815260208190526040902054156109835760405162461bcd60e51b815260206004820152602860248201527f44616e6b42616e6b4d61726b65743a20706f6f6c20616c726561647920696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015260840161057d565b6000821180156109935750600081115b610a055760405162461bcd60e51b815260206004820152603c60248201527f44616e6b42616e6b4d61726b65743a20696e697469616c20706f6f6c20616d6f60448201527f756e7473206d7573742062652067726561746572207468616e20302e00000000606482015260840161057d565b610a1c335b6001600160a01b038516903085611c08565b60006001600160a01b0384169050610a4533828460405180602001604052806000815250611ca7565b6001600160a01b03841660008181526020818152604091829020859055815192835282018590528181018490525133917f36f3b2e1a21c19137dd82ec243b0708a1d26b3d1fa1dc49c44c4c366a5878138919081900360600190a250505050565b6001600160a01b038316600090815260208190526040902054610b33576040805162461bcd60e51b81526020600482015260248101919091527f44616e6b42616e6b4d61726b65743a20706f6f6c206d75737420626520696e6960448201527f7469616c697a6564206265666f726520616464696e67206c6971756964697479606482015260840161057d565b610b3c33610a0a565b60006001600160a01b0384166040516370a0823160e01b815230600482015290915060009084906001600160a01b038716906370a082319060240160206040518083038186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc79190612ea1565b610bd19190613097565b6001600160a01b038616600090815260016020526040812054919250908290610bfa9087613078565b610c049190613058565b905080341015610c7c5760405162461bcd60e51b815260206004820152602a60248201527f44616e6b42616e6b4d61726b65743a20696e73756666696369656e742045544860448201527f20737570706c6965642e00000000000000000000000000000000000000000000606482015260840161057d565b83811015610cf25760405162461bcd60e51b815260206004820152603860248201527f44616e6b42616e6b4d61726b65743a2045544820737570706c696564206c657360448201527f73207468616e206d696e696d756d2072657175697265642e0000000000000000606482015260840161057d565b6001600160a01b03861660009081526001602052604081208054839290610d1a908490613040565b90915550506001600160a01b0386166000908152602081905260408120548390610d449088613078565b610d4e9190613058565b905080600080896001600160a01b03166001600160a01b031681526020019081526020016000206000828254610d849190613040565b90915550506000848152606a60205260408120548490610da49089613078565b610dae9190613058565b9050610dcb33868360405180602001604052806000815250611ca7565b82341115610e7457600033610de08534613097565b604051600081818185875af1925050503d8060008114610e1c576040519150601f19603f3d011682016040523d82523d6000602084013e610e21565b606091505b5050905080610e725760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b505b604080516001600160a01b038a16815260208101899052808201839052905133917f36f3b2e1a21c19137dd82ec243b0708a1d26b3d1fa1dc49c44c4c366a5878138919081900360600190a25050505050505050565b6000610ed68484611104565b905081811015610f4e5760405162461bcd60e51b815260206004820152602560248201527f44616e6b42616e6b4d61726b65743a20496e73756666696369656e742065746860448201527f206f75742e000000000000000000000000000000000000000000000000000000606482015260840161057d565b6001600160a01b038416600090815260016020526040902054811115610fde576040805162461bcd60e51b81526020600482015260248101919091527f44616e6b42616e6b4d61726b65743a204d61726b65742068617320696e73756660448201527f66696369656e74206c697175696469747920666f72207468652074726164652e606482015260840161057d565b6001600160a01b03841660008181526001602052604090208054839003905561100990333086611c08565b604051600090339083908381818185875af1925050503d806000811461104b576040519150601f19603f3d011682016040523d82523d6000602084013e611050565b606091505b50509050806110a15760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b604080516001600160a01b038716815260208101849052808201869052905133917f116315825ae78cd715af5d420fb35be93c7b3f4b9badb56c08397fc15a0f6ba0919081900360600190a25050505050565b61110160016101f4613097565b81565b60008061111460016101f4613097565b61111d856116d9565b6111279190613078565b6040516370a0823160e01b81523060048201529091506000906101f4906001600160a01b038716906370a082319060240160206040518083038186803b15801561117057600080fd5b505afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190612ea1565b6111b29190613078565b9050836111c260016101f4613097565b6111cc9190613078565b6111d69082613040565b6111e08584613078565b6111ea9190613058565b95945050505050565b6001600160a01b0384166000818152606a6020908152604080832054600190925282205490919082906112269088613078565b6112309190613058565b6001600160a01b03881660009081526001602052604081208054929350839290919061125d908490613097565b9091555050838110156112d85760405162461bcd60e51b815260206004820152603a60248201527f44616e6b42616e6b4d61726b65743a20455448206f7574206973206c6573732060448201527f7468616e206d696e696d756d2045544820737065636966696564000000000000606482015260840161057d565b6001600160a01b03871660009081526020819052604090205482906112fd9088613078565b6113079190613058565b6001600160a01b0388166000908152602081905260408120805490919061132f908490613097565b90915550506040516370a0823160e01b815230600482015260009083906001600160a01b038a16906370a082319060240160206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190612ea1565b6113ba9089613078565b6113c49190613058565b90508581101561143c5760405162461bcd60e51b815260206004820152603860248201527f44616e6b42616e6b4d61726b65743a20546f6b656e206f7574206973206c657360448201527f73207468616e206d696e696d756d207370656369666965640000000000000000606482015260840161057d565b611447338589611df3565b61145b6001600160a01b0389163383611fb5565b604051600090339084908381818185875af1925050503d806000811461149d576040519150601f19603f3d011682016040523d82523d6000602084013e6114a2565b606091505b50509050806114f35760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b604080516001600160a01b038b16815260208101849052808201859052606081018a9052905133917fbc7d19d505c7ec4db83f3b51f19fb98c4c8a99922e7839d1ee608dfbee29501b919081900360800190a2505050505050505050565b336001600160a01b03831614156115d05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161057d565b3360008181526068602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008061164c60016101f4613097565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c39190612ea1565b6116cd9190613078565b905060006101f46111a8865b6001600160a01b038116600090815260016020908152604080832054918390528220546106459190613040565b6000611712833461163c565b6001600160a01b03841660009081526001602052604081208054929350349290919061173f908490613040565b9091555050818110156117ba5760405162461bcd60e51b815260206004820152602860248201527f44616e6b42616e6b4d61726b65743a20496e73756666696369656e7420746f6b60448201527f656e73206f75742e000000000000000000000000000000000000000000000000606482015260840161057d565b6117ce6001600160a01b0384163383611fb5565b604080516001600160a01b0385168152346020820152808201839052905133917f21607de45a7d0d7230e8947fbfebe75f6f833efacb9cabf5afa0b67f4693c285919081900360600190a2505050565b6001600160a01b03851633148061183a575061183a853361046e565b6118ac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f7665640000000000000000000000000000000000000000000000606482015260840161057d565b61077a8585858585612003565b600254610100900460ff16806118d2575060025460ff16155b6119355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff16158015611957576002805461ffff19166101011790555b611960826121a5565b8015611972576002805461ff00191690555b5050565b81518351146119ed5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161057d565b6001600160a01b038416611a515760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161057d565b3360005b8451811015611b9a576000858281518110611a8057634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611aac57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526067835260408082206001600160a01b038e168352909352919091205490915081811015611b405760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161057d565b60008381526067602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b7f908490613040565b9250508190555050505080611b9390613142565b9050611a55565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bea929190612fe4565b60405180910390a4611c0081878787878761225c565b505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611ca19085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612411565b50505050565b6001600160a01b038416611d235760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161057d565b33611d3d81600087611d34886124f6565b61077a886124f6565b60008481526067602090815260408083206001600160a01b038916845290915281208054859290611d6f908490613040565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46000848152606a602052604081208054859290611dde908490613040565b9091555061077a90508160008787878761254f565b6001600160a01b038316611e6f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161057d565b33611e9f81856000611e80876124f6565b611e89876124f6565b5050604080516020810190915260009052505050565b60008381526067602090815260408083206001600160a01b038816845290915290205482811015611f375760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015260840161057d565b60008481526067602090815260408083206001600160a01b038981168086529184528285208887039055888552606a84528285208054899003905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516001600160a01b038316602482015260448101829052611ffe9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611c55565b505050565b6001600160a01b0384166120675760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161057d565b33612077818787611d34886124f6565b60008481526067602090815260408083206001600160a01b038a168452909152902054838110156120fd5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161057d565b60008581526067602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061213c908490613040565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461219c82888888888861254f565b50505050505050565b600254610100900460ff16806121be575060025460ff16155b6122215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff16158015612243576002805461ffff19166101011790555b61224b61265a565b61225361265a565b6119608261270d565b6001600160a01b0384163b15611c005760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122a09089908990889088908890600401612f3b565b602060405180830381600087803b1580156122ba57600080fd5b505af19250505080156122ea575060408051601f3d908101601f191682019092526122e791810190612e1f565b60015b6123a0576122f6613189565b806308c379a01415612330575061230b6131a1565b806123165750612332565b8060405162461bcd60e51b815260040161057d9190613009565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161057d565b6001600160e01b0319811663bc197c8160e01b1461219c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161057d565b6000612466826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127b49092919063ffffffff16565b805190915015611ffe57808060200190518101906124849190612de7565b611ffe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161057d565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061253e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611c005760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125939089908990889088908890600401612f99565b602060405180830381600087803b1580156125ad57600080fd5b505af19250505080156125dd575060408051601f3d908101601f191682019092526125da91810190612e1f565b60015b6125e9576122f6613189565b6001600160e01b0319811663f23a6e6160e01b1461219c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161057d565b600254610100900460ff1680612673575060025460ff16155b6126d65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff161580156126f8576002805461ffff19166101011790555b801561270a576002805461ff00191690555b50565b600254610100900460ff1680612726575060025460ff16155b6127895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff161580156127ab576002805461ffff19166101011790555b611960826127cd565b60606127c384846000856127e0565b90505b9392505050565b8051611972906069906020840190612958565b6060824710156128585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161057d565b843b6128a65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057d565b600080866001600160a01b031685876040516128c29190612f1f565b60006040518083038185875af1925050503d80600081146128ff576040519150601f19603f3d011682016040523d82523d6000602084013e612904565b606091505b509150915061291482828661291f565b979650505050505050565b6060831561292e5750816127c6565b82511561293e5782518084602001fd5b8160405162461bcd60e51b815260040161057d9190613009565b828054612964906130da565b90600052602060002090601f01602090048101928261298657600085556129cc565b82601f1061299f57805160ff19168380011785556129cc565b828001600101855582156129cc579182015b828111156129cc5782518255916020019190600101906129b1565b506129d89291506129dc565b5090565b5b808211156129d857600081556001016129dd565b600067ffffffffffffffff831115612a0b57612a0b613173565b604051612a22601f8501601f191660200182613115565b809150838152848484011115612a3757600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612a6657600080fd5b919050565b600082601f830112612a7b578081fd5b81356020612a888261301c565b604051612a958282613115565b8381528281019150858301600585901b87018401881015612ab4578586fd5b855b85811015612ad257813584529284019290840190600101612ab6565b5090979650505050505050565b600082601f830112612aef578081fd5b6127c6838335602085016129f1565b600060208284031215612b0f578081fd5b6127c682612a4f565b60008060408385031215612b2a578081fd5b612b3383612a4f565b9150612b4160208401612a4f565b90509250929050565b600080600080600060a08688031215612b61578081fd5b612b6a86612a4f565b9450612b7860208701612a4f565b9350604086013567ffffffffffffffff80821115612b94578283fd5b612ba089838a01612a6b565b94506060880135915080821115612bb5578283fd5b612bc189838a01612a6b565b93506080880135915080821115612bd6578283fd5b50612be388828901612adf565b9150509295509295909350565b600080600080600060a08688031215612c07578081fd5b612c1086612a4f565b9450612c1e60208701612a4f565b93506040860135925060608601359150608086013567ffffffffffffffff811115612c47578182fd5b612be388828901612adf565b60008060408385031215612c65578182fd5b612c6e83612a4f565b91506020830135612c7e8161322b565b809150509250929050565b60008060408385031215612c9b578182fd5b612ca483612a4f565b946020939093013593505050565b600080600060608486031215612cc6578283fd5b612ccf84612a4f565b95602085013595506040909401359392505050565b60008060008060808587031215612cf9578182fd5b612d0285612a4f565b966020860135965060408601359560600135945092505050565b60008060408385031215612d2e578182fd5b823567ffffffffffffffff80821115612d45578384fd5b818501915085601f830112612d58578384fd5b81356020612d658261301c565b604051612d728282613115565b8381528281019150858301600585901b870184018b1015612d91578889fd5b8896505b84871015612dba57612da681612a4f565b835260019690960195918301918301612d95565b5096505086013592505080821115612dd0578283fd5b50612ddd85828601612a6b565b9150509250929050565b600060208284031215612df8578081fd5b81516127c68161322b565b600060208284031215612e14578081fd5b81356127c681613239565b600060208284031215612e30578081fd5b81516127c681613239565b600060208284031215612e4c578081fd5b813567ffffffffffffffff811115612e62578182fd5b8201601f81018413612e72578182fd5b612e81848235602084016129f1565b949350505050565b600060208284031215612e9a578081fd5b5035919050565b600060208284031215612eb2578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612ee857815187529582019590820190600101612ecc565b509495945050505050565b60008151808452612f0b8160208601602086016130ae565b601f01601f19169290920160200192915050565b60008251612f318184602087016130ae565b9190910192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f6760a0830186612eb9565b8281036060840152612f798186612eb9565b90508281036080840152612f8d8185612ef3565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261291460a0830184612ef3565b6020815260006127c66020830184612eb9565b604081526000612ff76040830185612eb9565b82810360208401526111ea8185612eb9565b6020815260006127c66020830184612ef3565b600067ffffffffffffffff82111561303657613036613173565b5060051b60200190565b600082198211156130535761305361315d565b500190565b60008261307357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156130925761309261315d565b500290565b6000828210156130a9576130a961315d565b500390565b60005b838110156130c95781810151838201526020016130b1565b83811115611ca15750506000910152565b600181811c908216806130ee57607f821691505b6020821081141561310f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561313b5761313b613173565b6040525050565b60006000198214156131565761315661315d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561319e57600481823e5160e01c5b90565b600060443d10156131af5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156131df57505050505090565b82850191508151818111156131f75750505050505090565b843d87010160208285010111156132115750505050505090565b61322060208286010187613115565b509095945050505050565b801515811461270a57600080fd5b6001600160e01b03198116811461270a57600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x60806040526004361061018a5760003560e01c806382b1efc1116100d6578063cce7ec131161007f578063f153768611610059578063f15376861461049c578063f242432a146104c3578063f9fbdb9e146104e357600080fd5b8063cce7ec1314610413578063d315698814610426578063e985e9c51461045357600080fd5b8063a615e05a116100b0578063a615e05a146103bd578063b591b13c146103dd578063b6e7d665146103f357600080fd5b806382b1efc11461035057806393ca2f8a1461037d578063a22cb4651461039d57600080fd5b80634e1273f4116101385780636a272462116101125780636a272462146102fb57806375beb82c1461031b5780638108dd211461033057600080fd5b80634e1273f41461029b57806350eb2145146102c857806355776b77146102e857600080fd5b80630f991c38116101695780630f991c381461021f57806324eb07f51461024c5780632eb2c2d61461027957600080fd5b8062fdd58e1461018f57806301ffc9a7146101c25780630e89341c146101f2575b600080fd5b34801561019b57600080fd5b506101af6101aa366004612c89565b610503565b6040519081526020015b60405180910390f35b3480156101ce57600080fd5b506101e26101dd366004612e03565b6105ae565b60405190151581526020016101b9565b3480156101fe57600080fd5b5061021261020d366004612e89565b61064b565b6040516101b99190613009565b34801561022b57600080fd5b506101af61023a366004612afe565b60006020819052908152604090205481565b34801561025857600080fd5b506101af610267366004612afe565b60016020526000908152604090205481565b34801561028557600080fd5b50610299610294366004612b4a565b6106df565b005b3480156102a757600080fd5b506102bb6102b6366004612d1c565b610781565b6040516101b99190612fd1565b3480156102d457600080fd5b506102996102e3366004612cb2565b6108f7565b6102996102f6366004612cb2565b610aa6565b34801561030757600080fd5b50610299610316366004612cb2565b610eca565b34801561032757600080fd5b506101af6110f4565b34801561033c57600080fd5b506101af61034b366004612c89565b611104565b34801561035c57600080fd5b506101af61036b366004612e89565b606a6020526000908152604090205481565b34801561038957600080fd5b50610299610398366004612ce4565b6111f3565b3480156103a957600080fd5b506102996103b8366004612c53565b611551565b3480156103c957600080fd5b506101af6103d8366004612c89565b61163c565b3480156103e957600080fd5b506101af6101f481565b3480156103ff57600080fd5b506101af61040e366004612afe565b6116d9565b610299610421366004612c89565b611706565b34801561043257600080fd5b506101af610441366004612e89565b6000908152606a602052604090205490565b34801561045f57600080fd5b506101e261046e366004612b18565b6001600160a01b03918216600090815260686020908152604080832093909416825291909152205460ff1690565b3480156104a857600080fd5b506101af6104b7366004612afe565b6001600160a01b031690565b3480156104cf57600080fd5b506102996104de366004612bf0565b61181e565b3480156104ef57600080fd5b506102996104fe366004612e3b565b6118b9565b60006001600160a01b0383166105865760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5060009081526067602090815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061061157506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061064557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606069805461065a906130da565b80601f0160208091040260200160405190810160405280929190818152602001828054610686906130da565b80156106d35780601f106106a8576101008083540402835291602001916106d3565b820191906000526020600020905b8154815290600101906020018083116106b657829003601f168201915b50505050509050919050565b6001600160a01b0385163314806106fb57506106fb853361046e565b61076d5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161057d565b61077a8585858585611976565b5050505050565b606081518351146107fa5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161057d565b6000835167ffffffffffffffff81111561082457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561084d578160200160208202803683370190505b50905060005b84518110156108ef576108b485828151811061087f57634e487b7160e01b600052603260045260246000fd5b60200260200101518583815181106108a757634e487b7160e01b600052603260045260246000fd5b6020026020010151610503565b8282815181106108d457634e487b7160e01b600052603260045260246000fd5b60209081029190910101526108e881613142565b9050610853565b509392505050565b6001600160a01b038316600090815260208190526040902054156109835760405162461bcd60e51b815260206004820152602860248201527f44616e6b42616e6b4d61726b65743a20706f6f6c20616c726561647920696e6960448201527f7469616c697a6564000000000000000000000000000000000000000000000000606482015260840161057d565b6000821180156109935750600081115b610a055760405162461bcd60e51b815260206004820152603c60248201527f44616e6b42616e6b4d61726b65743a20696e697469616c20706f6f6c20616d6f60448201527f756e7473206d7573742062652067726561746572207468616e20302e00000000606482015260840161057d565b610a1c335b6001600160a01b038516903085611c08565b60006001600160a01b0384169050610a4533828460405180602001604052806000815250611ca7565b6001600160a01b03841660008181526020818152604091829020859055815192835282018590528181018490525133917f36f3b2e1a21c19137dd82ec243b0708a1d26b3d1fa1dc49c44c4c366a5878138919081900360600190a250505050565b6001600160a01b038316600090815260208190526040902054610b33576040805162461bcd60e51b81526020600482015260248101919091527f44616e6b42616e6b4d61726b65743a20706f6f6c206d75737420626520696e6960448201527f7469616c697a6564206265666f726520616464696e67206c6971756964697479606482015260840161057d565b610b3c33610a0a565b60006001600160a01b0384166040516370a0823160e01b815230600482015290915060009084906001600160a01b038716906370a082319060240160206040518083038186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc79190612ea1565b610bd19190613097565b6001600160a01b038616600090815260016020526040812054919250908290610bfa9087613078565b610c049190613058565b905080341015610c7c5760405162461bcd60e51b815260206004820152602a60248201527f44616e6b42616e6b4d61726b65743a20696e73756666696369656e742045544860448201527f20737570706c6965642e00000000000000000000000000000000000000000000606482015260840161057d565b83811015610cf25760405162461bcd60e51b815260206004820152603860248201527f44616e6b42616e6b4d61726b65743a2045544820737570706c696564206c657360448201527f73207468616e206d696e696d756d2072657175697265642e0000000000000000606482015260840161057d565b6001600160a01b03861660009081526001602052604081208054839290610d1a908490613040565b90915550506001600160a01b0386166000908152602081905260408120548390610d449088613078565b610d4e9190613058565b905080600080896001600160a01b03166001600160a01b031681526020019081526020016000206000828254610d849190613040565b90915550506000848152606a60205260408120548490610da49089613078565b610dae9190613058565b9050610dcb33868360405180602001604052806000815250611ca7565b82341115610e7457600033610de08534613097565b604051600081818185875af1925050503d8060008114610e1c576040519150601f19603f3d011682016040523d82523d6000602084013e610e21565b606091505b5050905080610e725760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b505b604080516001600160a01b038a16815260208101899052808201839052905133917f36f3b2e1a21c19137dd82ec243b0708a1d26b3d1fa1dc49c44c4c366a5878138919081900360600190a25050505050505050565b6000610ed68484611104565b905081811015610f4e5760405162461bcd60e51b815260206004820152602560248201527f44616e6b42616e6b4d61726b65743a20496e73756666696369656e742065746860448201527f206f75742e000000000000000000000000000000000000000000000000000000606482015260840161057d565b6001600160a01b038416600090815260016020526040902054811115610fde576040805162461bcd60e51b81526020600482015260248101919091527f44616e6b42616e6b4d61726b65743a204d61726b65742068617320696e73756660448201527f66696369656e74206c697175696469747920666f72207468652074726164652e606482015260840161057d565b6001600160a01b03841660008181526001602052604090208054839003905561100990333086611c08565b604051600090339083908381818185875af1925050503d806000811461104b576040519150601f19603f3d011682016040523d82523d6000602084013e611050565b606091505b50509050806110a15760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b604080516001600160a01b038716815260208101849052808201869052905133917f116315825ae78cd715af5d420fb35be93c7b3f4b9badb56c08397fc15a0f6ba0919081900360600190a25050505050565b61110160016101f4613097565b81565b60008061111460016101f4613097565b61111d856116d9565b6111279190613078565b6040516370a0823160e01b81523060048201529091506000906101f4906001600160a01b038716906370a082319060240160206040518083038186803b15801561117057600080fd5b505afa158015611184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a89190612ea1565b6111b29190613078565b9050836111c260016101f4613097565b6111cc9190613078565b6111d69082613040565b6111e08584613078565b6111ea9190613058565b95945050505050565b6001600160a01b0384166000818152606a6020908152604080832054600190925282205490919082906112269088613078565b6112309190613058565b6001600160a01b03881660009081526001602052604081208054929350839290919061125d908490613097565b9091555050838110156112d85760405162461bcd60e51b815260206004820152603a60248201527f44616e6b42616e6b4d61726b65743a20455448206f7574206973206c6573732060448201527f7468616e206d696e696d756d2045544820737065636966696564000000000000606482015260840161057d565b6001600160a01b03871660009081526020819052604090205482906112fd9088613078565b6113079190613058565b6001600160a01b0388166000908152602081905260408120805490919061132f908490613097565b90915550506040516370a0823160e01b815230600482015260009083906001600160a01b038a16906370a082319060240160206040518083038186803b15801561137857600080fd5b505afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b09190612ea1565b6113ba9089613078565b6113c49190613058565b90508581101561143c5760405162461bcd60e51b815260206004820152603860248201527f44616e6b42616e6b4d61726b65743a20546f6b656e206f7574206973206c657360448201527f73207468616e206d696e696d756d207370656369666965640000000000000000606482015260840161057d565b611447338589611df3565b61145b6001600160a01b0389163383611fb5565b604051600090339084908381818185875af1925050503d806000811461149d576040519150601f19603f3d011682016040523d82523d6000602084013e6114a2565b606091505b50509050806114f35760405162461bcd60e51b815260206004820181905260248201527f44616e6b42616e6b4d61726b65743a205472616e73666572206661696c65642e604482015260640161057d565b604080516001600160a01b038b16815260208101849052808201859052606081018a9052905133917fbc7d19d505c7ec4db83f3b51f19fb98c4c8a99922e7839d1ee608dfbee29501b919081900360800190a2505050505050505050565b336001600160a01b03831614156115d05760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161057d565b3360008181526068602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008061164c60016101f4613097565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a082319060240160206040518083038186803b15801561168b57600080fd5b505afa15801561169f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c39190612ea1565b6116cd9190613078565b905060006101f46111a8865b6001600160a01b038116600090815260016020908152604080832054918390528220546106459190613040565b6000611712833461163c565b6001600160a01b03841660009081526001602052604081208054929350349290919061173f908490613040565b9091555050818110156117ba5760405162461bcd60e51b815260206004820152602860248201527f44616e6b42616e6b4d61726b65743a20496e73756666696369656e7420746f6b60448201527f656e73206f75742e000000000000000000000000000000000000000000000000606482015260840161057d565b6117ce6001600160a01b0384163383611fb5565b604080516001600160a01b0385168152346020820152808201839052905133917f21607de45a7d0d7230e8947fbfebe75f6f833efacb9cabf5afa0b67f4693c285919081900360600190a2505050565b6001600160a01b03851633148061183a575061183a853361046e565b6118ac5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f7665640000000000000000000000000000000000000000000000606482015260840161057d565b61077a8585858585612003565b600254610100900460ff16806118d2575060025460ff16155b6119355760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff16158015611957576002805461ffff19166101011790555b611960826121a5565b8015611972576002805461ff00191690555b5050565b81518351146119ed5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161057d565b6001600160a01b038416611a515760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161057d565b3360005b8451811015611b9a576000858281518110611a8057634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611aac57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008481526067835260408082206001600160a01b038e168352909352919091205490915081811015611b405760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161057d565b60008381526067602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611b7f908490613040565b9250508190555050505080611b9390613142565b9050611a55565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611bea929190612fe4565b60405180910390a4611c0081878787878761225c565b505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611ca19085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612411565b50505050565b6001600160a01b038416611d235760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161057d565b33611d3d81600087611d34886124f6565b61077a886124f6565b60008481526067602090815260408083206001600160a01b038916845290915281208054859290611d6f908490613040565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46000848152606a602052604081208054859290611dde908490613040565b9091555061077a90508160008787878761254f565b6001600160a01b038316611e6f5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161057d565b33611e9f81856000611e80876124f6565b611e89876124f6565b5050604080516020810190915260009052505050565b60008381526067602090815260408083206001600160a01b038816845290915290205482811015611f375760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015260840161057d565b60008481526067602090815260408083206001600160a01b038981168086529184528285208887039055888552606a84528285208054899003905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516001600160a01b038316602482015260448101829052611ffe9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611c55565b505050565b6001600160a01b0384166120675760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161057d565b33612077818787611d34886124f6565b60008481526067602090815260408083206001600160a01b038a168452909152902054838110156120fd5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161057d565b60008581526067602090815260408083206001600160a01b038b811685529252808320878503905590881682528120805486929061213c908490613040565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461219c82888888888861254f565b50505050505050565b600254610100900460ff16806121be575060025460ff16155b6122215760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff16158015612243576002805461ffff19166101011790555b61224b61265a565b61225361265a565b6119608261270d565b6001600160a01b0384163b15611c005760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122a09089908990889088908890600401612f3b565b602060405180830381600087803b1580156122ba57600080fd5b505af19250505080156122ea575060408051601f3d908101601f191682019092526122e791810190612e1f565b60015b6123a0576122f6613189565b806308c379a01415612330575061230b6131a1565b806123165750612332565b8060405162461bcd60e51b815260040161057d9190613009565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161057d565b6001600160e01b0319811663bc197c8160e01b1461219c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161057d565b6000612466826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166127b49092919063ffffffff16565b805190915015611ffe57808060200190518101906124849190612de7565b611ffe5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161057d565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061253e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611c005760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906125939089908990889088908890600401612f99565b602060405180830381600087803b1580156125ad57600080fd5b505af19250505080156125dd575060408051601f3d908101601f191682019092526125da91810190612e1f565b60015b6125e9576122f6613189565b6001600160e01b0319811663f23a6e6160e01b1461219c5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161057d565b600254610100900460ff1680612673575060025460ff16155b6126d65760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff161580156126f8576002805461ffff19166101011790555b801561270a576002805461ff00191690555b50565b600254610100900460ff1680612726575060025460ff16155b6127895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161057d565b600254610100900460ff161580156127ab576002805461ffff19166101011790555b611960826127cd565b60606127c384846000856127e0565b90505b9392505050565b8051611972906069906020840190612958565b6060824710156128585760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161057d565b843b6128a65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161057d565b600080866001600160a01b031685876040516128c29190612f1f565b60006040518083038185875af1925050503d80600081146128ff576040519150601f19603f3d011682016040523d82523d6000602084013e612904565b606091505b509150915061291482828661291f565b979650505050505050565b6060831561292e5750816127c6565b82511561293e5782518084602001fd5b8160405162461bcd60e51b815260040161057d9190613009565b828054612964906130da565b90600052602060002090601f01602090048101928261298657600085556129cc565b82601f1061299f57805160ff19168380011785556129cc565b828001600101855582156129cc579182015b828111156129cc5782518255916020019190600101906129b1565b506129d89291506129dc565b5090565b5b808211156129d857600081556001016129dd565b600067ffffffffffffffff831115612a0b57612a0b613173565b604051612a22601f8501601f191660200182613115565b809150838152848484011115612a3757600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b0381168114612a6657600080fd5b919050565b600082601f830112612a7b578081fd5b81356020612a888261301c565b604051612a958282613115565b8381528281019150858301600585901b87018401881015612ab4578586fd5b855b85811015612ad257813584529284019290840190600101612ab6565b5090979650505050505050565b600082601f830112612aef578081fd5b6127c6838335602085016129f1565b600060208284031215612b0f578081fd5b6127c682612a4f565b60008060408385031215612b2a578081fd5b612b3383612a4f565b9150612b4160208401612a4f565b90509250929050565b600080600080600060a08688031215612b61578081fd5b612b6a86612a4f565b9450612b7860208701612a4f565b9350604086013567ffffffffffffffff80821115612b94578283fd5b612ba089838a01612a6b565b94506060880135915080821115612bb5578283fd5b612bc189838a01612a6b565b93506080880135915080821115612bd6578283fd5b50612be388828901612adf565b9150509295509295909350565b600080600080600060a08688031215612c07578081fd5b612c1086612a4f565b9450612c1e60208701612a4f565b93506040860135925060608601359150608086013567ffffffffffffffff811115612c47578182fd5b612be388828901612adf565b60008060408385031215612c65578182fd5b612c6e83612a4f565b91506020830135612c7e8161322b565b809150509250929050565b60008060408385031215612c9b578182fd5b612ca483612a4f565b946020939093013593505050565b600080600060608486031215612cc6578283fd5b612ccf84612a4f565b95602085013595506040909401359392505050565b60008060008060808587031215612cf9578182fd5b612d0285612a4f565b966020860135965060408601359560600135945092505050565b60008060408385031215612d2e578182fd5b823567ffffffffffffffff80821115612d45578384fd5b818501915085601f830112612d58578384fd5b81356020612d658261301c565b604051612d728282613115565b8381528281019150858301600585901b870184018b1015612d91578889fd5b8896505b84871015612dba57612da681612a4f565b835260019690960195918301918301612d95565b5096505086013592505080821115612dd0578283fd5b50612ddd85828601612a6b565b9150509250929050565b600060208284031215612df8578081fd5b81516127c68161322b565b600060208284031215612e14578081fd5b81356127c681613239565b600060208284031215612e30578081fd5b81516127c681613239565b600060208284031215612e4c578081fd5b813567ffffffffffffffff811115612e62578182fd5b8201601f81018413612e72578182fd5b612e81848235602084016129f1565b949350505050565b600060208284031215612e9a578081fd5b5035919050565b600060208284031215612eb2578081fd5b5051919050565b6000815180845260208085019450808401835b83811015612ee857815187529582019590820190600101612ecc565b509495945050505050565b60008151808452612f0b8160208601602086016130ae565b601f01601f19169290920160200192915050565b60008251612f318184602087016130ae565b9190910192915050565b60006001600160a01b03808816835280871660208401525060a06040830152612f6760a0830186612eb9565b8281036060840152612f798186612eb9565b90508281036080840152612f8d8185612ef3565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261291460a0830184612ef3565b6020815260006127c66020830184612eb9565b604081526000612ff76040830185612eb9565b82810360208401526111ea8185612eb9565b6020815260006127c66020830184612ef3565b600067ffffffffffffffff82111561303657613036613173565b5060051b60200190565b600082198211156130535761305361315d565b500190565b60008261307357634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156130925761309261315d565b500290565b6000828210156130a9576130a961315d565b500390565b60005b838110156130c95781810151838201526020016130b1565b83811115611ca15750506000910152565b600181811c908216806130ee57607f821691505b6020821081141561310f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561313b5761313b613173565b6040525050565b60006000198214156131565761315661315d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561319e57600481823e5160e01c5b90565b600060443d10156131af5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156131df57505050505090565b82850191508151818111156131f75750505050505090565b843d87010160208285010111156132115750505050505090565b61322060208286010187613115565b509095945050505050565b801515811461270a57600080fd5b6001600160e01b03198116811461270a57600080fdfea164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lpTokenSupply(uint256)": {
        "notice": "Get the supply of the token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3618,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "virtualEthPoolSupply",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3622,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "ethPoolSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_initialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 8,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_initializing",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 509,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 555,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3694,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_balances",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3700,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3702,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_uri",
        "offset": 0,
        "slot": "105",
        "type": "t_string_storage"
      },
      {
        "astId": 3706,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "_tokenSupplies",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4823,
        "contract": "contracts/DankBankMarket.sol:DankBankMarket",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
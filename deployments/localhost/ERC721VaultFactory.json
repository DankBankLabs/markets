{
  "address": "0xB4482F0188e3bDB30cc5d06A7004E234d82e41C7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_settings",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "logic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_listPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8bd7bad5ff04dfde6c0e8dce81f932efeba13d1bcf4117b585e5fef21d97b8b",
  "receipt": {
    "to": null,
    "from": "0xf0F4096ddb9b21d618877E2C741D1CCa69384507",
    "contractAddress": "0xB4482F0188e3bDB30cc5d06A7004E234d82e41C7",
    "transactionIndex": 0,
    "gasUsed": "3942132",
    "logsBloom": "0x
    "blockHash": "0x6abee84fcff38dece7bce909a51030b90010bd4d6253ea48b049227409788a5b",
    "transactionHash": "0xb8bd7bad5ff04dfde6c0e8dce81f932efeba13d1bcf4117b585e5fef21d97b8b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xb8bd7bad5ff04dfde6c0e8dce81f932efeba13d1bcf4117b585e5fef21d97b8b",
        "address": "0xB4482F0188e3bDB30cc5d06A7004E234d82e41C7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f0f4096ddb9b21d618877e2c741d1cca69384507"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6abee84fcff38dece7bce909a51030b90010bd4d6253ea48b049227409788a5b"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "3942132",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE1d71C5a8dA73bc50ed90e7ad6EE685aF3938DA0"
  ],
  "solcInputHash": "2585e23fe6e4f7f84297073a0aef36e4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_settings\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_listPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"mint(string,string,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_id\":\"the uint256 ID of the token\",\"_listPrice\":\"the initial price of the NFT\",\"_name\":\"the desired name of the vault\",\"_symbol\":\"the desired sumbol of the vault\",\"_token\":\"the ERC721 token address fo the NFT\"},\"returns\":{\"_0\":\"the ID of the vault\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"logic()\":{\"notice\":\"the TokenVault logic contract\"},\"mint(string,string,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"the function to mint a new vault\"},\"settings()\":{\"notice\":\"a settings contract controlled by governance\"},\"vaultCount()\":{\"notice\":\"the number of ERC721 vaults\"},\"vaults(uint256)\":{\"notice\":\"the mapping of vault number to vault contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fractional/ERC721VaultFactory.sol\":\"ERC721VaultFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/fractional/ERC721TokenVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Interfaces/IWETH.sol\\\";\\nimport \\\"./OpenZeppelin/math/Math.sol\\\";\\nimport \\\"./OpenZeppelin/token/ERC20/ERC20.sol\\\";\\nimport \\\"./OpenZeppelin/token/ERC721/ERC721.sol\\\";\\nimport \\\"./OpenZeppelin/token/ERC721/ERC721Holder.sol\\\";\\n\\nimport \\\"./Settings.sol\\\";\\n\\nimport \\\"./OpenZeppelin/upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"./OpenZeppelin/upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\ncontract TokenVault is ERC20Upgradeable, ERC721HolderUpgradeable {\\n    using Address for address;\\n\\n    /// -----------------------------------\\n    /// -------- BASIC INFORMATION --------\\n    /// -----------------------------------\\n\\n    /// @notice weth address\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    /// -----------------------------------\\n    /// -------- TOKEN INFORMATION --------\\n    /// -----------------------------------\\n\\n    /// @notice the ERC721 token address of the vault's token\\n    address public token;\\n\\n    /// @notice the ERC721 token ID of the vault's token\\n    uint256 public id;\\n\\n    /// -------------------------------------\\n    /// -------- AUCTION INFORMATION --------\\n    /// -------------------------------------\\n\\n    /// @notice the unix timestamp end time of the token auction\\n    uint256 public auctionEnd;\\n\\n    /// @notice the length of auctions\\n    uint256 public auctionLength;\\n\\n    /// @notice reservePrice * votingTokens\\n    uint256 public reserveTotal;\\n\\n    /// @notice the current price of the token during an auction\\n    uint256 public livePrice;\\n\\n    /// @notice the current user winning the token auction\\n    address payable public winning;\\n\\n    enum State { inactive, live, ended, redeemed }\\n\\n    State public auctionState;\\n\\n    /// -----------------------------------\\n    /// -------- VAULT INFORMATION --------\\n    /// -----------------------------------\\n\\n    /// @notice the governance contract which gets paid in ETH\\n    address public immutable settings;\\n\\n    /// @notice the address who initially deposited the NFT\\n    address public curator;\\n\\n    /// @notice the AUM fee paid to the curator yearly. 3 decimals. ie. 100 = 10%\\n    uint256 public fee;\\n\\n    /// @notice the last timestamp where fees were claimed\\n    uint256 public lastClaimed;\\n\\n    /// @notice a boolean to indicate if the vault has closed\\n    bool public vaultClosed;\\n\\n    /// @notice the number of ownership tokens voting on the reserve price at any given time\\n    uint256 public votingTokens;\\n\\n    /// @notice a mapping of users to their desired token price\\n    mapping(address => uint256) public userPrices;\\n\\n    /// ------------------------\\n    /// -------- EVENTS --------\\n    /// ------------------------\\n\\n    /// @notice An event emitted when a user updates their price\\n    event PriceUpdate(address indexed user, uint price);\\n\\n    /// @notice An event emitted when an auction starts\\n    event Start(address indexed buyer, uint price);\\n\\n    /// @notice An event emitted when a bid is made\\n    event Bid(address indexed buyer, uint price);\\n\\n    /// @notice An event emitted when an auction is won\\n    event Won(address indexed buyer, uint price);\\n\\n    /// @notice An event emitted when someone redeems all tokens for the NFT\\n    event Redeem(address indexed redeemer);\\n\\n    /// @notice An event emitted when someone cashes in ERC20 tokens for ETH from an ERC721 token sale\\n    event Cash(address indexed owner, uint256 shares);\\n\\n    constructor(address _settings) {\\n        settings = _settings;\\n    }\\n\\n    function initialize(address _curator, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee, string memory _name, string memory _symbol) external initializer {\\n        // initialize inherited contracts\\n        __ERC20_init(_name, _symbol);\\n        __ERC721Holder_init();\\n        // set storage variables\\n        token = _token;\\n        id = _id;\\n        reserveTotal = _listPrice * _supply;\\n        auctionLength = 7 days;\\n        curator = _curator;\\n        fee = _fee;\\n        lastClaimed = block.timestamp;\\n        votingTokens = _listPrice == 0 ? 0 : _supply;\\n\\n        auctionState = State.inactive;\\n\\n        _mint(_curator, _supply);\\n        userPrices[_curator] = _listPrice;\\n    }\\n\\n    /// --------------------------------\\n    /// -------- VIEW FUNCTIONS --------\\n    /// --------------------------------\\n\\n    function reservePrice() public view returns(uint256) {\\n        return votingTokens == 0 ? 0 : reserveTotal / votingTokens;\\n    }\\n\\n    /// -------------------------------\\n    /// -------- GOV FUNCTIONS --------\\n    /// -------------------------------\\n\\n    /// @notice allow governance to boot a bad actor curator\\n    /// @param _curator the new curator\\n    function kickCurator(address _curator) external {\\n        require(msg.sender == Ownable(settings).owner(), \\\"kick:not gov\\\");\\n\\n        curator = _curator;\\n    }\\n\\n    /// @notice allow governance to remove bad reserve prices\\n    function removeReserve(address _user) external {\\n        require(msg.sender == Ownable(settings).owner(), \\\"remove:not gov\\\");\\n        require(auctionState == State.inactive, \\\"update:auction live cannot update price\\\");\\n\\n        uint256 old = userPrices[_user];\\n        require(0 != old, \\\"update:not an update\\\");\\n        uint256 weight = balanceOf(_user);\\n\\n        votingTokens -= weight;\\n        reserveTotal -= weight * old;\\n        \\n        userPrices[_user] = 0;\\n\\n        emit PriceUpdate(_user, 0);\\n    }\\n\\n    /// -----------------------------------\\n    /// -------- CURATOR FUNCTIONS --------\\n    /// -----------------------------------\\n\\n    /// @notice allow curator to update the curator address\\n    /// @param _curator the new curator\\n    function updateCurator(address _curator) external {\\n        require(msg.sender == curator, \\\"update:not curator\\\");\\n\\n        curator = _curator;\\n    }\\n\\n    /// @notice allow curator to update the auction length\\n    /// @param _length the new base price\\n    function updateAuctionLength(uint256 _length) external {\\n        require(msg.sender == curator, \\\"update:not curator\\\");\\n        require(_length >= ISettings(settings).minAuctionLength() && _length <= ISettings(settings).maxAuctionLength(), \\\"update:invalid auction length\\\");\\n\\n        auctionLength = _length;\\n    }\\n\\n    /// @notice allow the curator to change their fee\\n    /// @param _fee the new fee\\n    function updateFee(uint256 _fee) external {\\n        require(msg.sender == curator, \\\"update:not curator\\\");\\n        require(_fee <= ISettings(settings).maxCuratorFee(), \\\"update:cannot increase fee this high\\\");\\n\\n        _claimFees();\\n\\n        fee = _fee;\\n    }\\n\\n    /// @notice external function to claim fees for the curator and governance\\n    function claimFees() external {\\n        _claimFees();\\n    }\\n\\n    /// @dev interal fuction to calculate and mint fees\\n    function _claimFees() internal {\\n        require(auctionState != State.ended, \\\"claim:cannot claim after auction ends\\\");\\n\\n        // get how much in fees the curator would make in a year\\n        uint256 currentAnnualFee = fee * totalSupply() / 1000; \\n        // get how much that is per second;\\n        uint256 feePerSecond = currentAnnualFee / 31536000;\\n        // get how many seconds they are eligible to claim\\n        uint256 sinceLastClaim = block.timestamp - lastClaimed;\\n        // get the amount of tokens to mint\\n        uint256 curatorMint = sinceLastClaim * feePerSecond;\\n\\n        // now lets do the same for governance\\n        address govAddress = ISettings(settings).feeReceiver();\\n        uint256 govFee = ISettings(settings).governanceFee();\\n        currentAnnualFee = govFee * totalSupply() / 1000; \\n        feePerSecond = currentAnnualFee / 31536000;\\n        uint256 govMint = sinceLastClaim * feePerSecond;\\n\\n        lastClaimed = block.timestamp;\\n\\n        _mint(curator, curatorMint);\\n        _mint(govAddress, govMint);\\n    }\\n\\n    /// --------------------------------\\n    /// -------- CORE FUNCTIONS --------\\n    /// --------------------------------\\n\\n    /// @notice a function for an end user to update their desired sale price\\n    /// @param _new the desired price in ETH\\n    function updateUserPrice(uint256 _new) external {\\n        require(auctionState == State.inactive, \\\"update:auction live cannot update price\\\");\\n        uint256 old = userPrices[msg.sender];\\n        require(_new != old, \\\"update:not an update\\\");\\n        uint256 weight = balanceOf(msg.sender);\\n\\n        if (votingTokens == 0) {\\n            votingTokens = weight;\\n            reserveTotal = weight * _new;\\n        }\\n        // they are the only one voting\\n        else if (weight == votingTokens && old != 0) {\\n            reserveTotal = weight * _new;\\n        }\\n        // previously they were not voting\\n        else if (old == 0) {\\n            uint256 averageReserve = reserveTotal / votingTokens;\\n\\n            uint256 reservePriceMin = averageReserve * ISettings(settings).minReserveFactor() / 1000;\\n            require(_new >= reservePriceMin, \\\"update:reserve price too low\\\");\\n            uint256 reservePriceMax = averageReserve * ISettings(settings).maxReserveFactor() / 1000;\\n            require(_new <= reservePriceMax, \\\"update:reserve price too high\\\");\\n\\n            votingTokens += weight;\\n            reserveTotal += weight * _new;\\n        } \\n        // they no longer want to vote\\n        else if (_new == 0) {\\n            votingTokens -= weight;\\n            reserveTotal -= weight * old;\\n        } \\n        // they are updating their vote\\n        else {\\n            uint256 averageReserve = (reserveTotal - (old * weight)) / (votingTokens - weight);\\n\\n            uint256 reservePriceMin = averageReserve * ISettings(settings).minReserveFactor() / 1000;\\n            require(_new >= reservePriceMin, \\\"update:reserve price too low\\\");\\n            uint256 reservePriceMax = averageReserve * ISettings(settings).maxReserveFactor() / 1000;\\n            require(_new <= reservePriceMax, \\\"update:reserve price too high\\\");\\n\\n            reserveTotal = reserveTotal + (weight * _new) - (weight * old);\\n        }\\n\\n        userPrices[msg.sender] = _new;\\n\\n        emit PriceUpdate(msg.sender, _new);\\n    }\\n\\n    /// @notice an internal function used to update sender and receivers price on token transfer\\n    /// @param _from the ERC20 token sender\\n    /// @param _to the ERC20 token receiver\\n    /// @param _amount the ERC20 token amount\\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal virtual override {\\n        if (_from != address(0) && auctionState == State.inactive) {\\n            uint256 fromPrice = userPrices[_from];\\n            uint256 toPrice = userPrices[_to];\\n\\n            // only do something if users have different reserve price\\n            if (toPrice != fromPrice) {\\n                // new holder is not a voter\\n                if (toPrice == 0) {\\n                    // get the average reserve price ignoring the senders amount\\n                    votingTokens -= _amount;\\n                    reserveTotal -= _amount * fromPrice;\\n                }\\n                // old holder is not a voter\\n                else if (fromPrice == 0) {\\n                    votingTokens += _amount;\\n                    reserveTotal += _amount * toPrice;\\n                }\\n                // both holders are voters\\n                else {\\n                    reserveTotal = reserveTotal + (_amount * toPrice) - (_amount * fromPrice);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice kick off an auction. Must send reservePrice in ETH\\n    function start() external payable {\\n        require(auctionState == State.inactive, \\\"start:no auction starts\\\");\\n        require(msg.value >= reservePrice(), \\\"start:too low bid\\\");\\n        require(votingTokens * 1000 >= ISettings(settings).minVotePercentage() * totalSupply(), \\\"start:not enough voters\\\");\\n        \\n        auctionEnd = block.timestamp + auctionLength;\\n        auctionState = State.live;\\n\\n        livePrice = msg.value;\\n        winning = payable(msg.sender);\\n\\n        emit Start(msg.sender, msg.value);\\n    }\\n\\n    /// @notice an external function to bid on purchasing the vaults NFT. The msg.value is the bid amount\\n    function bid() external payable {\\n        require(auctionState == State.live, \\\"bid:auction is not live\\\");\\n        uint256 increase = ISettings(settings).minBidIncrease() + 1000;\\n        require(msg.value * 1000 >= livePrice * increase, \\\"bid:too low bid\\\");\\n        require(block.timestamp < auctionEnd, \\\"bid:auction ended\\\");\\n\\n        // If bid is within 15 minutes of auction end, extend auction\\n        if (auctionEnd - block.timestamp <= 15 minutes) {\\n            auctionEnd += 15 minutes;\\n        }\\n\\n        _sendWETH(winning, livePrice);\\n\\n        livePrice = msg.value;\\n        winning = payable(msg.sender);\\n\\n        emit Bid(msg.sender, msg.value);\\n    }\\n\\n    /// @notice an external function to end an auction after the timer has run out\\n    function end() external {\\n        require(auctionState == State.live, \\\"end:vault has already closed\\\");\\n        require(block.timestamp >= auctionEnd, \\\"end:auction live\\\");\\n\\n        _claimFees();\\n\\n        // transfer erc721 to winner\\n        IERC721(token).transferFrom(address(this), winning, id);\\n\\n        auctionState = State.ended;\\n\\n        emit Won(winning, livePrice);\\n    }\\n\\n    /// @notice an external function to burn all ERC20 tokens to receive the ERC721 token\\n    function redeem() external {\\n        require(auctionState == State.inactive, \\\"redeem:no redeeming\\\");\\n        _burn(msg.sender, totalSupply());\\n        \\n        // transfer erc721 to redeemer\\n        IERC721(token).transferFrom(address(this), msg.sender, id);\\n        \\n        auctionState = State.redeemed;\\n\\n        emit Redeem(msg.sender);\\n    }\\n\\n    /// @notice an external function to burn ERC20 tokens to receive ETH from ERC721 token purchase\\n    function cash() external {\\n        require(auctionState == State.ended, \\\"cash:vault not closed yet\\\");\\n        uint256 bal = balanceOf(msg.sender);\\n        require(bal > 0, \\\"cash:no tokens to cash out\\\");\\n        uint256 share = bal * address(this).balance / totalSupply();\\n        _burn(msg.sender, bal);\\n\\n        _sendETHOrWETH(payable(msg.sender), share);\\n\\n        emit Cash(msg.sender, share);\\n    }\\n\\n    /// @dev internal helper function to send ETH and WETH on failure\\n    function _sendWETH(address who, uint256 amount) internal {\\n        IWETH(weth).deposit{value: amount}();\\n        IWETH(weth).transfer(who, IWETH(weth).balanceOf(address(this)));\\n    }\\n\\n    /// @dev internal helper function to send ETH and WETH on failure\\n    function _sendETHOrWETH(address who, uint256 amount) internal {\\n        // contracts get bet WETH because they can be mean\\n        if (who.isContract()) {\\n            IWETH(weth).deposit{value: amount}();\\n            IWETH(weth).transfer(who, IWETH(weth).balanceOf(address(this)));\\n        } else {\\n            payable(who).transfer(amount);\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0xbd83c1ac9d8e4e8ff4a4a07ce4ba1e11cf67f4cfcaf493331d39284aa4c8abdc\",\"license\":\"MIT\"},\"contracts/fractional/ERC721VaultFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OpenZeppelin/access/Ownable.sol\\\";\\nimport \\\"./OpenZeppelin/utils/Pausable.sol\\\";\\n\\nimport \\\"./OpenZeppelin/token/ERC721/ERC721.sol\\\";\\nimport \\\"./OpenZeppelin/token/ERC721/ERC721Holder.sol\\\";\\n\\nimport \\\"./InitializedProxy.sol\\\";\\nimport \\\"./Settings.sol\\\";\\nimport \\\"./ERC721TokenVault.sol\\\";\\n\\ncontract ERC721VaultFactory is Ownable, Pausable {\\n  /// @notice the number of ERC721 vaults\\n  uint256 public vaultCount;\\n\\n  /// @notice the mapping of vault number to vault contract\\n  mapping(uint256 => address) public vaults;\\n\\n  /// @notice a settings contract controlled by governance\\n  address public immutable settings;\\n  /// @notice the TokenVault logic contract\\n  address public immutable logic;\\n\\n  event Mint(address indexed token, uint256 id, uint256 price, address vault, uint256 vaultId);\\n\\n  constructor(address _settings) {\\n    settings = _settings;\\n    logic = address(new TokenVault(_settings));\\n  }\\n\\n  /// @notice the function to mint a new vault\\n  /// @param _name the desired name of the vault\\n  /// @param _symbol the desired sumbol of the vault\\n  /// @param _token the ERC721 token address fo the NFT\\n  /// @param _id the uint256 ID of the token\\n  /// @param _listPrice the initial price of the NFT\\n  /// @return the ID of the vault\\n  function mint(string memory _name, string memory _symbol, address _token, uint256 _id, uint256 _supply, uint256 _listPrice, uint256 _fee) external whenNotPaused returns(uint256) {\\n    bytes memory _initializationCalldata =\\n      abi.encodeWithSignature(\\n        \\\"initialize(address,address,uint256,uint256,uint256,uint256,string,string)\\\",\\n          msg.sender,\\n          _token,\\n          _id,\\n          _supply,\\n          _listPrice,\\n          _fee,\\n          _name,\\n          _symbol\\n    );\\n\\n    address vault = address(\\n      new InitializedProxy(\\n        logic,\\n        _initializationCalldata\\n      )\\n    );\\n\\n    emit Mint(_token, _id, _listPrice, vault, vaultCount);\\n\\n    IERC721(_token).safeTransferFrom(msg.sender, vault, _id);\\n    \\n    vaults[vaultCount] = vault;\\n    vaultCount++;\\n\\n    return vaultCount - 1;\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n}\\n\",\"keccak256\":\"0x7b0c1f00a33d7cebd5fec8984c9796add6c093a27bda0ed8a434ecc36029c3e4\",\"license\":\"MIT\"},\"contracts/fractional/InitializedProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title InitializedProxy\\n * @author Anna Carroll\\n */\\ncontract InitializedProxy {\\n    // address of logic contract\\n    address public immutable logic;\\n\\n    // ======== Constructor =========\\n\\n    constructor(\\n        address _logic,\\n        bytes memory _initializationCalldata\\n    ) {\\n        logic = _logic;\\n        // Delegatecall into the logic contract, supplying initialization calldata\\n        (bool _ok, bytes memory returnData) =\\n            _logic.delegatecall(_initializationCalldata);\\n        // Revert if delegatecall to implementation reverts\\n        require(_ok, string(returnData));\\n    }\\n\\n    // ======== Fallback =========\\n\\n    fallback() external payable {\\n        address _impl = logic;\\n        assembly {\\n            let ptr := mload(0x40)\\n            calldatacopy(ptr, 0, calldatasize())\\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\\n            let size := returndatasize()\\n            returndatacopy(ptr, 0, size)\\n\\n            switch result\\n                case 0 {\\n                    revert(ptr, size)\\n                }\\n                default {\\n                    return(ptr, size)\\n                }\\n        }\\n    }\\n\\n    // ======== Receive =========\\n\\n    receive() external payable {} // solhint-disable-line no-empty-blocks\\n}\",\"keccak256\":\"0x2b2c214726695b8d196f04c66d0013ddf5b6fa4a77924490a3cadfbc0e74317c\",\"license\":\"MIT\"},\"contracts/fractional/Interfaces/ISettings.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISettings {\\n\\n    function maxAuctionLength() external returns(uint256);\\n\\n    function minAuctionLength() external returns(uint256);\\n\\n    function maxCuratorFee() external returns(uint256);\\n\\n    function governanceFee() external returns(uint256);\\n\\n    function minBidIncrease() external returns(uint256);\\n\\n    function minVotePercentage() external returns(uint256);\\n\\n    function maxReserveFactor() external returns(uint256);\\n\\n    function minReserveFactor() external returns(uint256);\\n\\n    function feeReceiver() external returns(address payable);\\n\\n}\",\"keccak256\":\"0x4530040876f33b7afaa3699161aa3cbe7b1dae23e1d362a16d0f51df2ed1ebb3\",\"license\":\"MIT\"},\"contracts/fractional/Interfaces/IWETH.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint) external;\\n\\n    function approve(address, uint) external returns(bool);\\n\\n    function transfer(address, uint) external returns(bool);\\n\\n    function transferFrom(address, address, uint) external returns(bool);\\n\\n    function balanceOf(address) external view returns(uint);\\n\\n}\",\"keccak256\":\"0x570ca851d2a61c7b07d103e0d3cd1a818c797198ac4b7535ffa108e40c49c9c0\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(type(IERC165).interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x1fb127f5cce20e5ede3e2cea4f73679ee58b11eaf58cb3f372ae304821229d83\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The defaut value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overloaded;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x9ceb78a9b6a714543241044d035c2588aa38e2a505e778bc1827c58bc8475065\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(type(IERC721).interfaceId);\\n        _registerInterface(type(IERC721Metadata).interfaceId);\\n        _registerInterface(type(IERC721Enumerable).interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function _approve(address to, uint256 tokenId) private {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x06621e66d02d32cd086610e9a3392b2b26277213d4b5a6ad25b92b7473925817\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Receiver.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721Holder is IERC721Receiver {\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xd8487e42b16aa543b964160a463be1ce3b0ba46de0f3c10f4acbc41933877666\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe75db2fa62af4f543d39e1d718f77b5091aaf032988329e48839ce3410996fde\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb963a99b5eb875a72b388a5e776ed7a748e4e8244137eee6b6b3734bd9f299b7\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xed7e5a97848069b11b7199311bcb4b1f3c412c9237337703e752afb0b9970ddf\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x96877bb2eb8ca360e949ee1bd77b47a14e92e42f79897c350f088f87a3c231d4\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x8570116be0ba91a0e4e48508d8b74afb67baa9446c4cc08e2c54510be07835ce\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x430803579a1c09eb16a4275d43d8c9cd71b2931e40a9ab6c9feeff603ad70745\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xfc80c9f9d5f508ca3ec909b40ead8e29ba7c254f08c496139057a55d2d63266c\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x02a4ad99bf3dc836c9aca88b672ef9cae789ce0d7f3f926a7de66809e5cd4a7f\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xc6e9bea1d943d97521f0a73f2667eccc2eb0f740c209574d113ec5addb617472\",\"license\":\"MIT\"},\"contracts/fractional/OpenZeppelin/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x456e9b3a2bfe189b5249857f624f4139e59331db518483b456c4e587a20552e0\",\"license\":\"MIT\"},\"contracts/fractional/Settings.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OpenZeppelin/access/Ownable.sol\\\";\\nimport \\\"./Interfaces/ISettings.sol\\\";\\n\\ncontract Settings is Ownable, ISettings {\\n\\n    /// @notice the maximum auction length\\n    uint256 public override maxAuctionLength;\\n\\n    /// @notice the longest an auction can ever be\\n    uint256 public constant maxMaxAuctionLength = 8 weeks;\\n\\n    /// @notice the minimum auction length\\n    uint256 public override minAuctionLength;\\n\\n    /// @notice the shortest an auction can ever be\\n    uint256 public constant minMinAuctionLength = 1 days;\\n\\n    /// @notice governance fee max\\n    uint256 public override governanceFee;\\n\\n    /// @notice 10% fee is max\\n    uint256 public constant maxGovFee = 100;\\n\\n    /// @notice max curator fee\\n    uint256 public override maxCuratorFee;\\n\\n    /// @notice the % bid increase required for a new bid\\n    uint256 public override minBidIncrease;\\n\\n    /// @notice 10% bid increase is max \\n    uint256 public constant maxMinBidIncrease = 100;\\n\\n    /// @notice 1% bid increase is min\\n    uint256 public constant minMinBidIncrease = 10;\\n\\n    /// @notice the % of tokens required to be voting for an auction to start\\n    uint256 public override minVotePercentage;\\n\\n    /// @notice the max % increase over the initial \\n    uint256 public override maxReserveFactor;\\n\\n    /// @notice the max % decrease from the initial\\n    uint256 public override minReserveFactor;\\n\\n    /// @notice the address who receives auction fees\\n    address payable public override feeReceiver;\\n\\n    event UpdateMaxAuctionLength(uint256 _old, uint256 _new);\\n\\n    event UpdateMinAuctionLength(uint256 _old, uint256 _new);\\n\\n    event UpdateGovernanceFee(uint256 _old, uint256 _new);\\n\\n    event UpdateCuratorFee(uint256 _old, uint256 _new);\\n\\n    event UpdateMinBidIncrease(uint256 _old, uint256 _new);\\n\\n    event UpdateMinVotePercentage(uint256 _old, uint256 _new);\\n\\n    event UpdateMaxReserveFactor(uint256 _old, uint256 _new);\\n\\n    event UpdateMinReserveFactor(uint256 _old, uint256 _new);\\n\\n    event UpdateFeeReceiver(address _old, address _new);\\n\\n    constructor() {\\n        maxAuctionLength = 2 weeks;\\n        minAuctionLength = 3 days;\\n        feeReceiver = payable(msg.sender);\\n        minReserveFactor = 200;  // 20%\\n        maxReserveFactor = 5000; // 500%\\n        minBidIncrease = 50;     // 5%\\n        maxCuratorFee = 100;\\n        minVotePercentage = 250; // 25%\\n    }\\n\\n    function setMaxAuctionLength(uint256 _length) external onlyOwner {\\n        require(_length <= maxMaxAuctionLength, \\\"max auction length too high\\\");\\n        require(_length > minAuctionLength, \\\"max auction length too low\\\");\\n\\n        emit UpdateMaxAuctionLength(maxAuctionLength, _length);\\n\\n        maxAuctionLength = _length;\\n    }\\n\\n    function setMinAuctionLength(uint256 _length) external onlyOwner {\\n        require(_length >= minMinAuctionLength, \\\"min auction length too low\\\");\\n        require(_length < maxAuctionLength, \\\"min auction length too high\\\");\\n\\n        emit UpdateMinAuctionLength(minAuctionLength, _length);\\n\\n        minAuctionLength = _length;\\n    }\\n\\n    function setGovernanceFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= maxGovFee, \\\"fee too high\\\");\\n\\n        emit UpdateGovernanceFee(governanceFee, _fee);\\n\\n        governanceFee = _fee;\\n    }\\n\\n    function setMaxCuratorFee(uint256 _fee) external onlyOwner {\\n        emit UpdateCuratorFee(governanceFee, _fee);\\n\\n        maxCuratorFee = _fee;\\n    }\\n\\n    function setMinBidIncrease(uint256 _min) external onlyOwner {\\n        require(_min <= maxMinBidIncrease, \\\"min bid increase too high\\\");\\n        require(_min >= minMinBidIncrease, \\\"min bid increase too low\\\");\\n\\n        emit UpdateMinBidIncrease(minBidIncrease, _min);\\n\\n        minBidIncrease = _min;\\n    }\\n\\n    function setMinVotePercentage(uint256 _min) external onlyOwner {\\n        // 1000 is 100%\\n        require(_min <= 1000, \\\"min vote percentage too high\\\");\\n\\n        emit UpdateMinVotePercentage(minVotePercentage, _min);\\n\\n        minVotePercentage = _min;\\n    }\\n\\n    function setMaxReserveFactor(uint256 _factor) external onlyOwner {\\n        require(_factor > minReserveFactor, \\\"max reserve factor too low\\\");\\n\\n        emit UpdateMaxReserveFactor(maxReserveFactor, _factor);\\n\\n        maxReserveFactor = _factor;\\n    }\\n\\n    function setMinReserveFactor(uint256 _factor) external onlyOwner {\\n        require(_factor < maxReserveFactor, \\\"min reserve factor too high\\\");\\n\\n        emit UpdateMinReserveFactor(minReserveFactor, _factor);\\n\\n        minReserveFactor = _factor;\\n    }\\n\\n    function setFeeReceiver(address payable _receiver) external onlyOwner {\\n        require(_receiver != address(0), \\\"fees cannot go to 0 address\\\");\\n\\n        emit UpdateFeeReceiver(feeReceiver, _receiver);\\n\\n        feeReceiver = _receiver;\\n    }\\n\\n}\",\"keccak256\":\"0x0bcfbd4c4cf5461c48f3507de55185eb9fc09009dcc87fea6cf6d50800afdbe5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516147ac3803806147ac83398101604081905261002f916100ed565b600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160601b0319606082901b16608052604051819061009d906100e0565b6001600160a01b039091168152602001604051809103906000f0801580156100c9573d6000803e3d6000fd5b5060601b6001600160601b03191660a0525061011b565b61381080610f9c83390190565b6000602082840312156100fe578081fd5b81516001600160a01b0381168114610114578182fd5b9392505050565b60805160601c60a05160601c610e4f61014d6000396000818161018b0152610440015260006101b20152610e4f6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063d7dfa0dd1161005b578063d7dfa0dd14610186578063e06174e4146101ad578063f2fde38b146101d457600080fd5b80638da5cb5b1461014b578063a7c6a1001461015c578063bdc011101461017357600080fd5b8063715018a6116100b2578063715018a6146100fa5780638456cb59146101025780638c64ea4a1461010a57600080fd5b80633f4ba83a146100ce5780635c975abb146100d8575b600080fd5b6100d66101e7565b005b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6100d6610250565b6100d6610301565b6101336101183660046109c6565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6000546001600160a01b0316610133565b61016560015481565b6040519081526020016100f1565b610165610181366004610930565b610363565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101e236600461090f565b6105e5565b6000546001600160a01b031633146102465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61024e610723565b565b6000546001600160a01b031633146102aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b0316331461035b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b61024e6107c9565b60008054600160a01b900460ff16156103be5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161023d565b60003387878787878e8e6040516024016103df989796959493929190610a29565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f626fb2f000000000000000000000000000000000000000000000000000000000179052519091506000907f000000000000000000000000000000000000000000000000000000000000000090839061046b9061085e565b610476929190610a91565b604051809103906000f080158015610492573d6000803e3d6000fd5b509050876001600160a01b03167ff9c32fbc56ff04f32a233ebc26e388564223745e28abd8d0781dd906537f563e8887846001546040516104f5949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b60405180910390a26040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038281166024830152604482018990528916906342842e0e90606401600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b5050600180546000908152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716179055815493509091506105c483610ad2565b9190505550600180546105d79190610abb565b9a9950505050505050505050565b6000546001600160a01b0316331461063f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b6001600160a01b0381166106bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161023d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600054600160a01b900460ff1661077c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161023d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156108235760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161023d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107ac3390565b6103298062000b1a83390190565b80356001600160a01b038116811461088357600080fd5b919050565b600082601f830112610898578081fd5b813567ffffffffffffffff808211156108b3576108b3610b03565b604051601f8301601f19908116603f011681019082821181831017156108db576108db610b03565b816040528381528660208588010111156108f3578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610920578081fd5b6109298261086c565b9392505050565b600080600080600080600060e0888a03121561094a578283fd5b873567ffffffffffffffff80821115610961578485fd5b61096d8b838c01610888565b985060208a0135915080821115610982578485fd5b5061098f8a828b01610888565b96505061099e6040890161086c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000602082840312156109d7578081fd5b5035919050565b60008151808452815b81811015610a03576020818501810151868301820152016109e7565b81811115610a145782602083870101525b50601f01601f19169290920160200192915050565b60006101006001600160a01b03808c168452808b166020850152508860408401528760608401528660808401528560a08401528060c0840152610a6e818401866109de565b905082810360e0840152610a8281856109de565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201526000610ab360408301846109de565b949350505050565b600082821015610acd57610acd610aed565b500390565b6000600019821415610ae657610ae6610aed565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe60a060405234801561001057600080fd5b5060405161032938038061032983398101604081905261002f916100d7565b6001600160601b0319606083901b1660805260405160009081906001600160a01b0385169061005f9085906101a0565b600060405180830381855af49150503d806000811461009a576040519150601f19603f3d011682016040523d82523d6000602084013e61009f565b606091505b50915091508181906100cd5760405162461bcd60e51b81526004016100c491906101bc565b60405180910390fd5b5050505050610235565b600080604083850312156100e9578182fd5b82516001600160a01b03811681146100ff578283fd5b60208401519092506001600160401b038082111561011b578283fd5b818501915085601f83011261012e578283fd5b8151818111156101405761014061021f565b604051601f8201601f19908116603f011681019083821181831017156101685761016861021f565b81604052828152886020848701011115610180578586fd5b6101918360208301602088016101ef565b80955050505050509250929050565b600082516101b28184602087016101ef565b9190910192915050565b60208152600082518060208401526101db8160408501602087016101ef565b601f01601f19169190910160400192915050565b60005b8381101561020a5781810151838201526020016101f2565b83811115610219576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60d361025660003960008181602a0152607b015260d36000f3fe608060405260043610601f5760003560e01c8063d7dfa0dd14606b576025565b36602557005b6040517f00000000000000000000000000000000000000000000000000000000000000009036600082376000803683855af43d806000843e8180156067578184f35b8184fd5b348015607657600080fd5b50609d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea164736f6c6343000804000aa164736f6c6343000804000a60a06040523480156200001157600080fd5b50604051620038103803806200381083398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c61371c620000f4600039600081816107cf015281816109f001528181610cb101528181610df101528181610e8e0152818161128b015281816113890152818161153e0152818161163c015281816117b801528181611a8601528181611fce01528181612bb20152612c49015261371c6000f3fe6080604052600436106102d15760003560e01c806380436fe011610179578063be040fb0116100d6578063dd62ed3e1161008a578063e66f53b711610064578063e66f53b7146107f1578063efbe1c1c14610811578063fc0c546a1461082657600080fd5b8063dd62ed3e14610761578063ddca3f43146107a7578063e06174e4146107bd57600080fd5b8063c91de649116100bb578063c91de6491461070a578063d294f09314610737578063db2e1eed1461074c57600080fd5b8063be040fb0146106ed578063be9a65551461070257600080fd5b80639a4e6d341161012d578063a9059cbb11610112578063a9059cbb146106a1578063adc1b956146106c1578063af640d0f146106d757600080fd5b80639a4e6d341461066b578063a457c2d71461068157600080fd5b80639012c4a81161015e5780639012c4a81461062157806395d89b4114610641578063961be3911461065657600080fd5b806380436fe0146105e1578063853a1b901461060157600080fd5b8063313ce56711610232578063626fb2f0116101e657806370a08231116101c057806370a08231146105675780637b5581ed1461059d5780637fb45099146105b357600080fd5b8063626fb2f0146105115780636a775714146105315780636da84e6c1461055157600080fd5b8063395093511161021757806339509351146104975780633fc8cef3146104b75780635c9920fc146104f757600080fd5b8063313ce56714610465578063325c25a21461048157600080fd5b80631998aeef116102895780632a24f46c1161026e5780632a24f46c1461040f5780632a44f120146104255780632bf33bd91461044557600080fd5b80631998aeef146103e757806323b872dd146103ef57600080fd5b80630c6a62dd116102ba5780630c6a62dd14610331578063150b7a021461035357806318160ddd146103c857600080fd5b806306fdde03146102d6578063095ea7b314610301575b600080fd5b3480156102e257600080fd5b506102eb610846565b6040516102f891906135d2565b60405180910390f35b34801561030d57600080fd5b5061032161031c36600461352f565b6108d8565b60405190151581526020016102f8565b34801561033d57600080fd5b5061035161034c366004613355565b6108ee565b005b34801561035f57600080fd5b5061039761036e366004613405565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102f8565b3480156103d457600080fd5b506035545b6040519081526020016102f8565b610351610971565b3480156103fb57600080fd5b5061032161040a3660046133c5565b610bf0565b34801561041b57600080fd5b506103d960995481565b34801561043157600080fd5b50610351610440366004613355565b610caf565b34801561045157600080fd5b5061035161046036600461357a565b610da0565b34801561047157600080fd5b50604051601281526020016102f8565b34801561048d57600080fd5b506103d9609a5481565b3480156104a357600080fd5b506103216104b236600461352f565b610f74565b3480156104c357600080fd5b506104df73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6040516001600160a01b0390911681526020016102f8565b34801561050357600080fd5b5060a1546103219060ff1681565b34801561051d57600080fd5b5061035161052c366004613482565b610fb0565b34801561053d57600080fd5b5061035161054c36600461357a565b611133565b34801561055d57600080fd5b506103d9609c5481565b34801561057357600080fd5b506103d9610582366004613355565b6001600160a01b031660009081526033602052604090205490565b3480156105a957600080fd5b506103d9609b5481565b3480156105bf57600080fd5b50609d546105d490600160a01b900460ff1681565b6040516102f891906135aa565b3480156105ed57600080fd5b506103516105fc366004613355565b6117b6565b34801561060d57600080fd5b50609d546104df906001600160a01b031681565b34801561062d57600080fd5b5061035161063c36600461357a565b611a35565b34801561064d57600080fd5b506102eb611b98565b34801561066257600080fd5b50610351611ba7565b34801561067757600080fd5b506103d960a25481565b34801561068d57600080fd5b5061032161069c36600461352f565b611ced565b3480156106ad57600080fd5b506103216106bc36600461352f565b611d9e565b3480156106cd57600080fd5b506103d960a05481565b3480156106e357600080fd5b506103d960985481565b3480156106f957600080fd5b50610351611dab565b610351611ef7565b34801561071657600080fd5b506103d9610725366004613355565b60a36020526000908152604090205481565b34801561074357600080fd5b50610351612147565b34801561075857600080fd5b506103d9612151565b34801561076d57600080fd5b506103d961077c36600461338d565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b3480156107b357600080fd5b506103d9609f5481565b3480156107c957600080fd5b506104df7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107fd57600080fd5b50609e546104df906001600160a01b031681565b34801561081d57600080fd5b50610351612178565b34801561083257600080fd5b506097546104df906001600160a01b031681565b60606036805461085590613693565b80601f016020809104026020016040519081016040528092919081815260200182805461088190613693565b80156108ce5780601f106108a3576101008083540402835291602001916108ce565b820191906000526020600020905b8154815290600101906020018083116108b157829003601f168201915b5050505050905090565b60006108e5338484612324565b50600192915050565b609e546001600160a01b031633146109425760405162461bcd60e51b81526020600482015260126024820152713ab83230ba329d3737ba1031bab930ba37b960711b60448201526064015b60405180910390fd5b609e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001609d54600160a01b900460ff16600381111561099f57634e487b7160e01b600052602160045260246000fd5b146109ec5760405162461bcd60e51b815260206004820152601760248201527f6269643a61756374696f6e206973206e6f74206c6976650000000000000000006044820152606401610939565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637c513c0f6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a819190613592565b610a8d906103e8613625565b905080609c54610a9d919061365d565b610aa9346103e861365d565b1015610af75760405162461bcd60e51b815260206004820152600f60248201527f6269643a746f6f206c6f772062696400000000000000000000000000000000006044820152606401610939565b6099544210610b485760405162461bcd60e51b815260206004820152601160248201527f6269643a61756374696f6e20656e6465640000000000000000000000000000006044820152606401610939565b61038442609954610b59919061367c565b11610b785761038460996000828254610b729190613625565b90915550505b609d54609c54610b91916001600160a01b03169061247c565b34609c819055609d805473ffffffffffffffffffffffffffffffffffffffff191633908117909155604051918252907fe684a55f31b79eca403df938249029212a5925ec6be8012e099b45bc1019e5d29060200160405180910390a250565b6000610bfd848484612624565b6001600160a01b038416600090815260346020908152604080832033845290915290205482811015610c975760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e63650000000000000000000000000000000000000000000000006064820152608401610939565b610ca48533858403612324565b506001949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d0857600080fd5b505afa158015610d1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d409190613371565b6001600160a01b0316336001600160a01b0316146109425760405162461bcd60e51b815260206004820152600c60248201527f6b69636b3a6e6f7420676f7600000000000000000000000000000000000000006044820152606401610939565b609e546001600160a01b03163314610def5760405162461bcd60e51b81526020600482015260126024820152713ab83230ba329d3737ba1031bab930ba37b960711b6044820152606401610939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a0b335e36040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610e4a57600080fd5b505af1158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190613592565b8110158015610f2357507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630e519ef96040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1f9190613592565b8111155b610f6f5760405162461bcd60e51b815260206004820152601d60248201527f7570646174653a696e76616c69642061756374696f6e206c656e6774680000006044820152606401610939565b609a55565b3360008181526034602090815260408083206001600160a01b038716845290915281205490916108e5918590610fab908690613625565b612324565b600054610100900460ff1680610fc9575060005460ff16155b61102c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610939565b600054610100900460ff1615801561104e576000805461ffff19166101011790555b6110588383612847565b61106061290d565b6097805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a161790556098879055611097868661365d565b609b5562093a80609a55609e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038b16179055609f8490554260a05584156110de57856110e1565b60005b60a255609d805460ff60a01b191690556110fb89876129c8565b6001600160a01b038916600090815260a3602052604090208590558015611128576000805461ff00191690555b505050505050505050565b6000609d54600160a01b900460ff16600381111561116157634e487b7160e01b600052602160045260246000fd5b146111be5760405162461bcd60e51b815260206004820152602760248201527f7570646174653a61756374696f6e206c6976652063616e6e6f742075706461746044820152666520707269636560c81b6064820152608401610939565b33600090815260a360205260409020548181141561121e5760405162461bcd60e51b815260206004820152601460248201527f7570646174653a6e6f7420616e207570646174650000000000000000000000006044820152606401610939565b3360009081526033602052604090205460a25461124c5760a2819055611244838261365d565b609b55611765565b60a2548114801561125c57508115155b1561126b57611244838261365d565b816114c157600060a254609b54611282919061363d565b905060006103e87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166309990a966040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156112e457600080fd5b505af11580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c9190613592565b611326908461365d565b611330919061363d565b9050808510156113825760405162461bcd60e51b815260206004820152601c60248201527f7570646174653a7265736572766520707269636520746f6f206c6f77000000006044820152606401610939565b60006103e87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635410bfc96040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a9190613592565b611424908561365d565b61142e919061363d565b9050808611156114805760405162461bcd60e51b815260206004820152601d60248201527f7570646174653a7265736572766520707269636520746f6f20686967680000006044820152606401610939565b8360a260008282546114929190613625565b909155506114a29050868561365d565b609b60008282546114b39190613625565b909155506117659350505050565b82611504578060a260008282546114d8919061367c565b909155506114e89050828261365d565b609b60008282546114f9919061367c565b909155506117659050565b60008160a254611514919061367c565b61151e838561365d565b609b5461152b919061367c565b611535919061363d565b905060006103e87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166309990a966040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561159757600080fd5b505af11580156115ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cf9190613592565b6115d9908461365d565b6115e3919061363d565b9050808510156116355760405162461bcd60e51b815260206004820152601c60248201527f7570646174653a7265736572766520707269636520746f6f206c6f77000000006044820152606401610939565b60006103e87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635410bfc96040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561169557600080fd5b505af11580156116a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cd9190613592565b6116d7908561365d565b6116e1919061363d565b9050808611156117335760405162461bcd60e51b815260206004820152601d60248201527f7570646174653a7265736572766520707269636520746f6f20686967680000006044820152606401610939565b61173d858561365d565b611747878661365d565b609b546117549190613625565b61175e919061367c565b609b555050505b33600081815260a3602052604090819020859055517f64e6e7bd72b853c4e62fd6ceaca05a104700c70a4cb567c75c7f2242ba7f037c906117a99086815260200190565b60405180910390a2505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561180f57600080fd5b505afa158015611823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118479190613371565b6001600160a01b0316336001600160a01b0316146118a75760405162461bcd60e51b815260206004820152600e60248201527f72656d6f76653a6e6f7420676f760000000000000000000000000000000000006044820152606401610939565b6000609d54600160a01b900460ff1660038111156118d557634e487b7160e01b600052602160045260246000fd5b146119325760405162461bcd60e51b815260206004820152602760248201527f7570646174653a61756374696f6e206c6976652063616e6e6f742075706461746044820152666520707269636560c81b6064820152608401610939565b6001600160a01b038116600090815260a36020526040902054806119985760405162461bcd60e51b815260206004820152601460248201527f7570646174653a6e6f7420616e207570646174650000000000000000000000006044820152606401610939565b6001600160a01b03821660009081526033602052604081205490508060a260008282546119c5919061367c565b909155506119d59050828261365d565b609b60008282546119e6919061367c565b90915550506001600160a01b038316600081815260a360209081526040808320839055519182527f64e6e7bd72b853c4e62fd6ceaca05a104700c70a4cb567c75c7f2242ba7f037c91016117a9565b609e546001600160a01b03163314611a845760405162461bcd60e51b81526020600482015260126024820152713ab83230ba329d3737ba1031bab930ba37b960711b6044820152606401610939565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638a364bc16040518163ffffffff1660e01b8152600401602060405180830381600087803b158015611adf57600080fd5b505af1158015611af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b179190613592565b811115611b8b5760405162461bcd60e51b8152602060048201526024808201527f7570646174653a63616e6e6f7420696e6372656173652066656520746869732060448201527f68696768000000000000000000000000000000000000000000000000000000006064820152608401610939565b611b93612ab3565b609f55565b60606037805461085590613693565b6002609d54600160a01b900460ff166003811115611bd557634e487b7160e01b600052602160045260246000fd5b14611c225760405162461bcd60e51b815260206004820152601960248201527f636173683a7661756c74206e6f7420636c6f73656420796574000000000000006044820152606401610939565b3360009081526033602052604090205480611c7f5760405162461bcd60e51b815260206004820152601a60248201527f636173683a6e6f20746f6b656e7320746f2063617368206f75740000000000006044820152606401610939565b6000611c8a60355490565b611c94478461365d565b611c9e919061363d565b9050611caa3383612d4a565b611cb43382612edb565b60405181815233907f730831a1e4aa2d187ddd8e03d7beeac760a3927da5f112d645e0f8df7494b3679060200160405180910390a25050565b3360009081526034602090815260408083206001600160a01b038616845290915281205482811015611d875760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610939565b611d943385858403612324565b5060019392505050565b60006108e5338484612624565b6000609d54600160a01b900460ff166003811115611dd957634e487b7160e01b600052602160045260246000fd5b14611e265760405162461bcd60e51b815260206004820152601360248201527f72656465656d3a6e6f2072656465656d696e67000000000000000000000000006044820152606401610939565b611e3833611e3360355490565b612d4a565b6097546098546040516323b872dd60e01b815230600482015233602482015260448101919091526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611e8e57600080fd5b505af1158015611ea2573d6000803e3d6000fd5b5050609d805460ff60a01b191674030000000000000000000000000000000000000000179055505060405133907fd1b5ea7fe0f1c2fa09d49c2aa9b2200664ba57a734f1d95481d95b7f99af991c90600090a2565b6000609d54600160a01b900460ff166003811115611f2557634e487b7160e01b600052602160045260246000fd5b14611f725760405162461bcd60e51b815260206004820152601760248201527f73746172743a6e6f2061756374696f6e207374617274730000000000000000006044820152606401610939565b611f7a612151565b341015611fc95760405162461bcd60e51b815260206004820152601160248201527f73746172743a746f6f206c6f77206269640000000000000000000000000000006044820152606401610939565b6035547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166332977c736040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561202757600080fd5b505af115801561203b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205f9190613592565b612069919061365d565b60a254612078906103e861365d565b10156120c65760405162461bcd60e51b815260206004820152601760248201527f73746172743a6e6f7420656e6f75676820766f746572730000000000000000006044820152606401610939565b609a546120d39042613625565b609955609d805434609c8190557fffffffffffffffffffffff00000000000000000000000000000000000000000090911633908117600160a01b179092556040519081527fcfb9c5312b25ec7b809d61e638df25f749eae5d5c25399e1c93d1d319bfd5821906020015b60405180910390a2565b61214f612ab3565b565b600060a2546000146121725760a254609b5461216d919061363d565b905090565b50600090565b6001609d54600160a01b900460ff1660038111156121a657634e487b7160e01b600052602160045260246000fd5b146121f35760405162461bcd60e51b815260206004820152601c60248201527f656e643a7661756c742068617320616c726561647920636c6f736564000000006044820152606401610939565b6099544210156122455760405162461bcd60e51b815260206004820152601060248201527f656e643a61756374696f6e206c697665000000000000000000000000000000006044820152606401610939565b61224d612ab3565b609754609d546098546040516323b872dd60e01b81523060048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401600060405180830381600087803b1580156122a757600080fd5b505af11580156122bb573d6000803e3d6000fd5b5050609d80547402000000000000000000000000000000000000000060ff60a01b19821617909155609c546040519081526001600160a01b0390911692507f8b01f9dd0400d6a1e84369a5fb8f6033934856ffa8ebadd707dca302ab551695915060200161213d565b6001600160a01b03831661239f5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610939565b6001600160a01b03821661241b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610939565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124cb57600080fd5b505af11580156124df573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2935063a9059cbb925085915083906370a082319060240160206040518083038186803b15801561255157600080fd5b505afa158015612565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125899190613592565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156125e757600080fd5b505af11580156125fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261f919061355a565b505050565b6001600160a01b0383166126a05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610939565b6001600160a01b03821661271c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610939565b612727838383612f70565b6001600160a01b038316600090815260336020526040902054818110156127b65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610939565b6001600160a01b038085166000908152603360205260408082208585039055918516815290812080548492906127ed908490613625565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161283991815260200190565b60405180910390a350505050565b600054610100900460ff1680612860575060005460ff16155b6128c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610939565b600054610100900460ff161580156128e5576000805461ffff19166101011790555b6128ed613093565b6128f78383613144565b801561261f576000805461ff0019169055505050565b600054610100900460ff1680612926575060005460ff16155b6129895760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610939565b600054610100900460ff161580156129ab576000805461ffff19166101011790555b6129b3613093565b80156129c5576000805461ff00191690555b50565b6001600160a01b038216612a1e5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610939565b612a2a60008383612f70565b8060356000828254612a3c9190613625565b90915550506001600160a01b03821660009081526033602052604081208054839290612a69908490613625565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6002609d54600160a01b900460ff166003811115612ae157634e487b7160e01b600052602160045260246000fd5b1415612b555760405162461bcd60e51b815260206004820152602560248201527f636c61696d3a63616e6e6f7420636c61696d2061667465722061756374696f6e60448201527f20656e64730000000000000000000000000000000000000000000000000000006064820152608401610939565b60006103e8612b6360355490565b609f54612b70919061365d565b612b7a919061363d565b90506000612b8c6301e133808361363d565b9050600060a05442612b9e919061367c565b90506000612bac838361365d565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b3f006746040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612c0b57600080fd5b505af1158015612c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c439190613371565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630ea90a126040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612ca257600080fd5b505af1158015612cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cda9190613592565b90506103e8612ce860355490565b612cf2908361365d565b612cfc919061363d565b9550612d0c6301e133808761363d565b94506000612d1a868661365d565b4260a055609e54909150612d37906001600160a01b0316856129c8565b612d4183826129c8565b50505050505050565b6001600160a01b038216612dc65760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610939565b612dd282600083612f70565b6001600160a01b03821660009081526033602052604090205481811015612e615760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60448201527f63650000000000000000000000000000000000000000000000000000000000006064820152608401610939565b6001600160a01b0383166000908152603360205260408120838303905560358054849290612e9090849061367c565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0382163b15612f3a5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156124cb57600080fd5b6040516001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561261f573d6000803e3d6000fd5b6001600160a01b03831615801590612fb357506000609d54600160a01b900460ff166003811115612fb157634e487b7160e01b600052602160045260246000fd5b145b1561261f576001600160a01b03808416600090815260a3602052604080822054928516825290205480821461308c5780613025578260a26000828254612ff9919061367c565b909155506130099050828461365d565b609b600082825461301a919061367c565b9091555061308c9050565b8161305d578260a2600082825461303c9190613625565b9091555061304c9050818461365d565b609b600082825461301a9190613625565b613067828461365d565b613071828561365d565b609b5461307e9190613625565b613088919061367c565b609b555b5050505050565b600054610100900460ff16806130ac575060005460ff16155b61310f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610939565b600054610100900460ff161580156129b3576000805461ffff191661010117905580156129c5576000805461ff001916905550565b600054610100900460ff168061315d575060005460ff16155b6131c05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610939565b600054610100900460ff161580156131e2576000805461ffff19166101011790555b82516131f5906036906020860190613220565b508151613209906037906020850190613220565b50801561261f576000805461ff0019169055505050565b82805461322c90613693565b90600052602060002090601f01602090048101928261324e5760008555613294565b82601f1061326757805160ff1916838001178555613294565b82800160010185558215613294579182015b82811115613294578251825591602001919060010190613279565b506132a09291506132a4565b5090565b5b808211156132a057600081556001016132a5565b600067ffffffffffffffff808411156132d4576132d46136e4565b604051601f8501601f19908116603f011681019082821181831017156132fc576132fc6136e4565b8160405280935085815286868601111561331557600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261333f578081fd5b61334e838335602085016132b9565b9392505050565b600060208284031215613366578081fd5b813561334e816136fa565b600060208284031215613382578081fd5b815161334e816136fa565b6000806040838503121561339f578081fd5b82356133aa816136fa565b915060208301356133ba816136fa565b809150509250929050565b6000806000606084860312156133d9578081fd5b83356133e4816136fa565b925060208401356133f4816136fa565b929592945050506040919091013590565b6000806000806080858703121561341a578081fd5b8435613425816136fa565b93506020850135613435816136fa565b925060408501359150606085013567ffffffffffffffff811115613457578182fd5b8501601f81018713613467578182fd5b613476878235602084016132b9565b91505092959194509250565b600080600080600080600080610100898b03121561349e578384fd5b88356134a9816136fa565b975060208901356134b9816136fa565b965060408901359550606089013594506080890135935060a0890135925060c089013567ffffffffffffffff808211156134f1578384fd5b6134fd8c838d0161332f565b935060e08b0135915080821115613512578283fd5b5061351f8b828c0161332f565b9150509295985092959890939650565b60008060408385031215613541578182fd5b823561354c816136fa565b946020939093013593505050565b60006020828403121561356b578081fd5b8151801515811461334e578182fd5b60006020828403121561358b578081fd5b5035919050565b6000602082840312156135a3578081fd5b5051919050565b60208101600483106135cc57634e487b7160e01b600052602160045260246000fd5b91905290565b6000602080835283518082850152825b818110156135fe578581018301518582016040015282016135e2565b8181111561360f5783604083870101525b50601f01601f1916929092016040019392505050565b60008219821115613638576136386136ce565b500190565b60008261365857634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613677576136776136ce565b500290565b60008282101561368e5761368e6136ce565b500390565b600181811c908216806136a757607f821691505b602082108114156136c857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146129c557600080fdfea164736f6c6343000804000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80638da5cb5b11610081578063d7dfa0dd1161005b578063d7dfa0dd14610186578063e06174e4146101ad578063f2fde38b146101d457600080fd5b80638da5cb5b1461014b578063a7c6a1001461015c578063bdc011101461017357600080fd5b8063715018a6116100b2578063715018a6146100fa5780638456cb59146101025780638c64ea4a1461010a57600080fd5b80633f4ba83a146100ce5780635c975abb146100d8575b600080fd5b6100d66101e7565b005b600054600160a01b900460ff1660405190151581526020015b60405180910390f35b6100d6610250565b6100d6610301565b6101336101183660046109c6565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b6000546001600160a01b0316610133565b61016560015481565b6040519081526020016100f1565b610165610181366004610930565b610363565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6101337f000000000000000000000000000000000000000000000000000000000000000081565b6100d66101e236600461090f565b6105e5565b6000546001600160a01b031633146102465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61024e610723565b565b6000546001600160a01b031633146102aa5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b0316331461035b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b61024e6107c9565b60008054600160a01b900460ff16156103be5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161023d565b60003387878787878e8e6040516024016103df989796959493929190610a29565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f626fb2f000000000000000000000000000000000000000000000000000000000179052519091506000907f000000000000000000000000000000000000000000000000000000000000000090839061046b9061085e565b610476929190610a91565b604051809103906000f080158015610492573d6000803e3d6000fd5b509050876001600160a01b03167ff9c32fbc56ff04f32a233ebc26e388564223745e28abd8d0781dd906537f563e8887846001546040516104f5949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b60405180910390a26040517f42842e0e0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038281166024830152604482018990528916906342842e0e90606401600060405180830381600087803b15801561056657600080fd5b505af115801561057a573d6000803e3d6000fd5b5050600180546000908152600260205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716179055815493509091506105c483610ad2565b9190505550600180546105d79190610abb565b9a9950505050505050505050565b6000546001600160a01b0316331461063f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023d565b6001600160a01b0381166106bb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161023d565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600054600160a01b900460ff1661077c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161023d565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156108235760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161023d565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586107ac3390565b6103298062000b1a83390190565b80356001600160a01b038116811461088357600080fd5b919050565b600082601f830112610898578081fd5b813567ffffffffffffffff808211156108b3576108b3610b03565b604051601f8301601f19908116603f011681019082821181831017156108db576108db610b03565b816040528381528660208588010111156108f3578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215610920578081fd5b6109298261086c565b9392505050565b600080600080600080600060e0888a03121561094a578283fd5b873567ffffffffffffffff80821115610961578485fd5b61096d8b838c01610888565b985060208a0135915080821115610982578485fd5b5061098f8a828b01610888565b96505061099e6040890161086c565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b6000602082840312156109d7578081fd5b5035919050565b60008151808452815b81811015610a03576020818501810151868301820152016109e7565b81811115610a145782602083870101525b50601f01601f19169290920160200192915050565b60006101006001600160a01b03808c168452808b166020850152508860408401528760608401528660808401528560a08401528060c0840152610a6e818401866109de565b905082810360e0840152610a8281856109de565b9b9a5050505050505050505050565b6001600160a01b0383168152604060208201526000610ab360408301846109de565b949350505050565b600082821015610acd57610acd610aed565b500390565b6000600019821415610ae657610ae6610aed565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfe60a060405234801561001057600080fd5b5060405161032938038061032983398101604081905261002f916100d7565b6001600160601b0319606083901b1660805260405160009081906001600160a01b0385169061005f9085906101a0565b600060405180830381855af49150503d806000811461009a576040519150601f19603f3d011682016040523d82523d6000602084013e61009f565b606091505b50915091508181906100cd5760405162461bcd60e51b81526004016100c491906101bc565b60405180910390fd5b5050505050610235565b600080604083850312156100e9578182fd5b82516001600160a01b03811681146100ff578283fd5b60208401519092506001600160401b038082111561011b578283fd5b818501915085601f83011261012e578283fd5b8151818111156101405761014061021f565b604051601f8201601f19908116603f011681019083821181831017156101685761016861021f565b81604052828152886020848701011115610180578586fd5b6101918360208301602088016101ef565b80955050505050509250929050565b600082516101b28184602087016101ef565b9190910192915050565b60208152600082518060208401526101db8160408501602087016101ef565b601f01601f19169190910160400192915050565b60005b8381101561020a5781810151838201526020016101f2565b83811115610219576000848401525b50505050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60d361025660003960008181602a0152607b015260d36000f3fe608060405260043610601f5760003560e01c8063d7dfa0dd14606b576025565b36602557005b6040517f00000000000000000000000000000000000000000000000000000000000000009036600082376000803683855af43d806000843e8180156067578184f35b8184fd5b348015607657600080fd5b50609d7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f3fea164736f6c6343000804000aa164736f6c6343000804000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "mint(string,string,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_id": "the uint256 ID of the token",
          "_listPrice": "the initial price of the NFT",
          "_name": "the desired name of the vault",
          "_symbol": "the desired sumbol of the vault",
          "_token": "the ERC721 token address fo the NFT"
        },
        "returns": {
          "_0": "the ID of the vault"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "logic()": {
        "notice": "the TokenVault logic contract"
      },
      "mint(string,string,address,uint256,uint256,uint256,uint256)": {
        "notice": "the function to mint a new vault"
      },
      "settings()": {
        "notice": "a settings contract controlled by governance"
      },
      "vaultCount()": {
        "notice": "the number of ERC721 vaults"
      },
      "vaults(uint256)": {
        "notice": "the mapping of vault number to vault contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1768,
        "contract": "contracts/fractional/ERC721VaultFactory.sol:ERC721VaultFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13616,
        "contract": "contracts/fractional/ERC721VaultFactory.sol:ERC721VaultFactory",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1210,
        "contract": "contracts/fractional/ERC721VaultFactory.sol:ERC721VaultFactory",
        "label": "vaultCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1215,
        "contract": "contracts/fractional/ERC721VaultFactory.sol:ERC721VaultFactory",
        "label": "vaults",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}